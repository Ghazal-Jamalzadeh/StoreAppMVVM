Android studio short cuts---------------------------------------------------------------------------
Ctrl + ALT + O = remove unnecessary imports (optimize imports)

Ctrl + alt + +/- = open/close a specific block of code
Ctrl + shift + +/- = open/close all blocks of code in a page

LogCat----------------------------------------------------------------------------------------------
برای فیلتر کردن لاگ های مثلا ارور در اندروید استدیو جدید میتونید از کلمات کلیدی مختلف استفاده کنید
برای فیلتر کردن نوع خاصی از لاگ از level استفاده کنید

Dependencies----------------------------------------------------------------------------------------
Data Binding:
خودمون استفاده ای ازش نداریم ولی یکی از کتتابخانه هایی که اد کردیم نیازش داره

Coli & Glide:
بین کتابخانه های لود عکس در اندروید بهترین پرفورمنس مال گلاید هست
مزیت کویل اینه که صد در صد کاتلینیه و با کروتین ها خیلی مچه
کوبل با کروتین ساخته شده کاملا ولی گلاید سازوکار خاص خودشو داره
و زمانی که گلاید عرضه شد خطای out of memory رو تا ۸۰ درصد کاهش داد
مثل رتروفیت یک کتابخونه انقلابی بود

PinView:
برای وارد کردن اعداد کد تایید و...

MP Android Chart:
بزرگترین کتابخونه رسم نمودار برای اندروید هست
تقریبا هر مدل نموداری بخوایم داره
حتی نمودارهای کاستوم میتونید بسازید
بلا استثنا تمام پروژه های بزرگ از این کتابخانه استفاده میکنن

Application class-----------------------------------------------------------------------------------
برای معرفی هیلت و کالی گرافی
(res -> RClick -> new folder -> assetFolder -> insert font here)

Calligraphy------------------------------------------------------------------------------------------
1- application class
2- manifest
3- main activity
(میتونیم کدش رو توی هر اکتیویتی به صوررت مجزا بنویسیم ولی میبریم  توی بیس اکتیویتی که اصولی تر باشه)

Data Store-------------------------------------------------------------------------------------------
میتونیم کلاس مربوط به دیتا استور رو توی پکیج یوتیلز یا دیتا قرار بدیم و هر دو درسته کاملا
ما میایم میذاریم توی دیتا چون میگیم کار با دیتاست دیگه
براش هم یک پکیج می سازیم به اسم stored

ما از لفظ سشن برای کارهای مربوط به توکن و واحراز هویت استفاده میکنیم
سشن چیه؟
توی هر پلتفرمی که باشید یک فضایی برای شما در نظر میگیرند
که شما توی اون فضا می تونید وجود داشته باشید
اطلاعاتت رو دارن و میدونن شما چه شخصی هستید
پلتفرم ها میان برای این سشن ها یک اکسپایر تایم یا زمان منقضی شدن در نظر میگیرن
مثلا دو ساعت - دو هفته - دو ماه
هر از گاهی میندازمت بیرون دوباره لاگین کن
که این یک چیز کاملا عرفیه

دیتا استور یک دیتابیس مانندیه که میاد توی یک فایلی از جنس xml ذخیره میکنه دیتای ما رو

    companion object{
        /* دقت کنید روی کلاس کانتکس تعریف کنید نه آبجکت کانتکس */
        /* این خط کد میاد میاد خود فایل اون چیزی که داره درست میشه رو برامون درست میکنه
        * شبیه اسم دیتابیس توی روم */
        private val Context.dataStore : DataStore<Preferences> by  preferencesDataStore(SESSION_AUTH_DATA)
        /* این خط کد میاد دیتای داخل اون فایل رو برامون ذخیره میکنه
        * شبیه اسم تیبل توی روم */
        private val tokenKey = stringPreferencesKey(USER_TOKEN_DATA)
    }

این نکته رم دقت کنید:
زمانی که از دیتااستور استفاده می کنید
دیتا استور به ازای هر یک از کلیدها باید یک بار ساخته شود
اکه توی کامپنین ابجکت قرار ندید مدام میخواد بسازه
و با ارور رو به رو میشید
پس یا باید به صورت سینگل تون بسازید یا کامپنین آبجکت باشه حتما

برای دریافت توکن از کد زیر استفاده میکنیم
    val getToken : Flow<String?> = appContext.dataStore.data.map { data: Preferences ->
        data.toString()
    }
میخوام به صورت فلویی از استرینگ باشه که بتونم کالکتش کنم
ولی وقتی میزنیم دیتا استور دات دیتا یک فلویی از پرفرنسیز میده بمون
خب پس مپ میزنیم که بتونیم تبدیل کنیم

-----------------------------------------------
برای استفاده از مقادیر ذخیره شده در دیتا استور در فرگمنت (اسپلش)
بعد از تزریق وابستگی های لازم:
میتونیم از کالکت استفاده کنیم
                val token = sessionManager.getToken.collect{ value : String? ->
                    value
                }
یا نه یک روش بهتر میتونیم از فرست استفاده کنیم:
مزیتش چیه؟
میگه زمانی که اون چیزی که تو میخوای رو در اختیارت قرار داد
بلافاصله اون کالکشن رو میاد کنسل میکنه
ما صرفا تو اسپلش میخوایم چک کنیم همچین محتوایی موجوده با نه
نمیخوایم گوش به زنگ تغییرات باشیم که

                val token : String? = sessionManager.getToken.first()


این روش مدیریت کردن سشن (یعنی با یک کلاس جداگانه) یکی از بهترین روش های مدیریت سشن هست که تا حالا توی این دوره انجام دادیم

Navigation------------------------------------------------------------------------------------------
res -> RClick -> new android resource directory -> navigation

توی این پروژه یاد میگیریم که چطور نویگیشن های تو در تو استفاده کنیم

Hilt named and qualifiers---------------------------------------------------------------------------
کوالیفایرها که یکم سختن و باید فایل جدا براشون ساخت و این ها
برای named ها
چون هیلت از روی دیتا تایپ تشخیص میده چیزا رو
وقتی مثلا دو تا لانگ داریم باید یکیش نیمد باشه
وقتی ۱۰ تا لانگ داریم باید ۹ تاش نیمد باشه


ViewModel & LiveData--------------------------------------------------------------------------------
کار جدیدی که در این پروژه کردیم استفاده از انکپسولیشن در لایو دیتاهاست
همچنین ویومدل رو قبلا به این شکل تعریف میکردیم توی صفحه
    private val viewModel : LoginViewModel by viewModels()
    private val viewModel by viewModels<LoginViewModel>()
عینا شبیه هم هستن و برتری خاصی به هم ندارن اصلا

-------------------------------------------------------------------------تزریق وابستگی در دیتا کلاس ها
فرض کنید این کلاس رو داریم و میخوایم بتونیم تزریقش کنیم
data class BodyLogin(
    @SerializedName("login")
    val login: String?, //09120174757
    @SerializedName("hash_code")
    val hashCode: String?, //hjfvhzdbg#+
)

روش اول :
data class BodyLogin @Inject constructor(
    @SerializedName("login")
    val login: String?, //09120174757
    @SerializedName("hash_code")
    val hashCode: String?, //hjfvhzdbg#+
)

روش دوم: (اصولی تر)
بهتره بیایم این ها رو در قالب یک ماژول در نظر بگیریم
چرا؟
چون یک سری دیتا دارن معمولا که باید توی ورودی بهشون بدیم
مجبور نباشیم دستی هندل کنیم
به این منظور FragmentModule رو می سازیم
لایف سسایکل این ماژول هم به جای سینگل تون فرگمنت خواهد بود
دقت کنید چون باید مقداردهی اولیه صورت بگیرد مقادیر var بوده و مقدار اولیه null رو میدیم

extensions------------------------------------------------------------------------------------------
یک نکته ی نهایت مهم و کمیاب درمورد اکستنشن فانکشن ها
اگر اکستنشن فانکشنی رو دارید می نویسید که کارهای نسبتا سنگین تری رو داره انجام میده
و کدهای زیادی داره و روی ui کار میکنه
بهتره به صورت جداگانه نوشته شه
اکستنشن های  کوچیک و سبک رو توی همون فایل جنرال اکستنشن ها بنویسید

hide keyboard-----------------------------
fun View.hideKeyboard() {
    val imm = context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
    imm.hideSoftInputFromWindow(windowToken, 0)
}
context :
وقتی اکستنشنن رو روی ویو مینویسیم خیلی راحت ببا کلمه context به کانتکس هم دسترسی داریم

getSystemService :
دسترسی به حالت هایی که توی سیستم من به عنوان سرویس وجود دارن

INPUT_METHOD_SERVICE :
یکی از این حالت ها اینپوت متد من هست که مربوط به کیبورد است
برای دسترسی بهش به کلاس کانتکس نیاز داریم

as InputMethodManager :
تبدیلش میکنیم به  InputMethodManager

windowToken :
توسط ویو بهش دسترسی داریم
 به همون صفحه ای که داریم باهاش کار میکنیم اشاره میکند

0 :
فلگ صفر کیبورد رو میبنده

Sealed class----------------------------------------------------------------------------------------
چون تما زیر مجموعه های سیلد کلاس از همون سیلد کلاس ساختته شدن با is میتونیم مقایسه کنیم
از is زمانی میتونیم استفاده کنیم که ارث بری صورت گرفته

Nested Nav graph------------------------------------------------------------------------------------
میخوایم استپ های مربوط به لاگین رو ببریم توی یک نویگیشن مستقل

select fragments -> RClick -> move to nested group -> new graph -> rename it

تو این روش فایل جدا ساخته نمیشه و تو همون فابل خودمون هستن
چالشی که این مدل درست میکنه دسترسی به فرگمنت های دخلی این ها هست
ارتباط بین نویگشن ها و ...
همه رو یاد میگیریم

Custom animation for navigation--------------------------------------------------------------------
Res -> R click -> new android resource directory -> anim

----------------------------------------------------------------بستن یک فرگمنت از داخل یک فرگمنت دیگه
                 findNavController().popBackStack(R.id.loginVerifyFragment , true)
                 findNavController().popBackStack(R.id.loginPhoneFragment , true)
بااین کد از داخل صفحه وریفای تمام صفحات لاگین رو از استک پاک کردیم

args with & without default value-------------------------------------------------------------------
اگر دیفالت ولیو ست نکنیم برای آرگز
به این شکل دایرکشن ساخته میشه
                            val direction = LoginPhoneFragmentDirections.actionLoginPhoneFragmentToLoginVerifyFragment(phone)
                            findNavController().navigate(direction)
ایراد این روش اینه که اگه به هر دلیل این آرگز فرستاده نشه کرش میکنیم
مثلا اگه اون فرگمنت هوم باشه

حالا اگر دیفالت ولیو ست کنیم دیگه با کد بالا نمیتونیم آرگز رو بفرستیم و ارور میگیریم
too many arguments...
باید چیکار کنیم؟
                            val direction = LoginPhoneFragmentDirections.actionLoginPhoneFragmentToLoginVerifyFragment().setMobile(phone)
                            findNavController().navigate(direction)

---------------------------------------------------------------------------باگ بک زدن در صفحه وریفای
ما یک لایو دیتا توی صفحه لاگین داریم که میگه
هر زمان ریسپانس ۲۰۰ اومد نویگیت کن به صفحه وریفای
خب در نتیجه هر زمان که از صفحه وریفای بک بزنیم به لاگین
ذات لایو دیتا اینه که آخرین دیتا رو پس میاره
یعنی دوباره همون لحظه ما رو میفرسته به وریفای
خب باید چیکار کرد توی اینجور مواقع؟

یک روش که قبلا یاد گرفتیم:
سینگل آبزرو کردن اون لایودیتا

یک روش ساده تر هم هست:
توی این روش خودمون میایم لاجیکش رو مینویسیم
فلگ گذاری:
حالا این فلگ رو کجا بذاریم که الکی هم مقدارش عوض نشه؟
تو خود فرگمنت که نمیشه گذاشت
توی اکتیویتی میشه گذاشت چون سینگل اکتیویتی هستیم
{من خودم توی ویومدل میذاشتم}
حالا ما میخوایم بیایم توی فایل کانستتنت بذاریمش
توی این روش توی کل اپلیکیشن توی مموری ساخته میشه و میمونه و بهش دسترسی داریم
IS_CALLED_VERIFY

moneySeparating Extension---------------------------------------------------------------------------
این اکستنشن برای سه رقم سه رقم جدا کردنن اعداد هستش

fun Int.moneySeparating(): String {
    return "${DecimalFormat("#,###.##").format(this)} تومان"
}

DecimalFormat :
یک کلاس جاوایی هست که میگه یک پترنی رو برای من مشخص کن
برای سه رقم سه رقم جدا کردن پترنش میشه شبیه پترن بالا
مثلا توی اپ های بانکی که شماره کارت ۴ رقم ۴ رقم جدا میشه هم با استفاده از همیناس
این پترن رو از کجا آوردیم؟
سرچ کنید...

Live Data-------------------------------------------------------------------------------------------
روش اول
میومدیم یک لایودیتا تعریف میکردیم
liveData.value = something

روش دوم
liveData {
//do what you want to do - fo example : call api

emit(something)

}

Call Products Api (homeViewModel/products)----------------------------------------------------------
برای پیمایش اینام ها ما یک کدی داریم به شکل زیر
enum.values
خروجی این کد یک "آرایه" هست از اون اینام مورد نظر ما
    private val categoriesName1 : Array<ProductsCategories> = ProductsCategories.values()

یک مد دیگری هم هست به اسم associateWith در ادامه میتونیم بزنیم به شکل زیر
    private val categoriesName : Map<ProductsCategories , String> = ProductsCategories.values().associateWith {
        it.label
    }
که میاد هر یک دونه اینام رو با مقداری که ما توی آکلاد ریترن میکنیم مپ میکنه

کارهای دیگه ای هم میشه باش کرد
چون داره اینام ما روو پیمایش میکنه
میتونیم به ازای هر آیتم یک عملیاتی رو انجام بدیم مثل صدا زدن api

حالا گفتیم خروجی متغیر بالا یک مپ میشه دیگه؟
ما وقتی مپ داریم یک متدی هم داریم به اسم getValue
ورودی این یک کلیده و در ازای اون کلید ولیوی مورد نظر رو برمیگردونه

حالا ما اگه بیایم توی اوم آکلاده api کال کنیم
    private val categoriesName = ProductsCategories.values().associateWith {
        getProducts(it)
    }
خروجی متد getProducts یک لایو دیتا است
پس خروجی این میشه
Map<ProductsCategories , LiveData<MyResponse<ResponseProducts>>>

و ما با اون getValues لایودیتای مورد نظرمون رو با کلیدش دریافت میکنیم
واقعا هوشمندانه...

RecyclerView Adapter--------------------------------------------------------------------------------
نکته خیلی مهم در مورد آداپتر ریسایکلر ویو
موقع visible invisible کردن ویوها
یا تغییر رنگ ها و...
حتما وقتی یک شرط if میذارید else ش رو هم هندل کنید
اگه این کار رو نکنید توی تعداد آیتم بالای یک صفحه هولدرتون کسخل میشه

Custom Dialog---------------------------------------------------------------------------------------
    private fun showVpnDialog() {
        val dialog = Dialog(requireContext())

به جای فایند ویو بای آیدی از بایندینگ استفاده میکنیم
و لایه کاستومی که ساختیم رو بهش اتچ میکنیم
نحوه اینیشیالایز کردن بایندینگ توی آداپتر به این شکل هست
        val dialogBinding = DialogCheckVpnBinding.inflate(layoutInflater)

برای اینکه بتونیم این حالت راند بودن کرنرها توی دیالوگ رو در بیاریم
باید یک حالتی روی دیالوگ ست کنیم و بهش بگیم این ویندویی که خودت داری رو ترنسپرنت کن
در غیر این صورت حتی با اینکه بک گراند راند براش ست کردیم بازم نشون نمیده و گوشه ها تیز میمونن
برای این کار یک اکستنشن می نویسیم
        dialog.transparentCorners()

ویو رو بهش میدیم و لایه رو ست میکنیم
نکته مهم:
زمانی که میخواید روی ویندوها کار کنید
حالا فرق نداره مال دیالوگ باشن یا فرگمنت یا هر چی
حتما حتما حتما باید عملیات ویندو رو قبل از ست کردن لایه انجام بدید
        dialog.setContentView(dialogBinding.root)

کلیک لیسنر
        dialogBinding.yesBtn.setOnClickListener { dialog.dismiss() }

اینم که بیلدرش
        dialog.show()
    }

Save Page State-------------------------------------------------------------------------------------
روش های مختلفی برای این کار وجود داره
ما یک روش بی نهایت ساده و کاربردی و حرفه ای و ایده آل رو اینجا استفاده میکنیم

یک راه اینه که ویومدلمون لایف سایکل اکتیویتی رو داشته باشه
دیتا رو نگه میداره در این حالت
حالا من میخوام استیت جایی که اسکرول شده رو نگه دارم
برای این کار میام یک کاستوم ویو برای اسکرول ویوم درست میکنم
و بهش میگم بیا این وضعیت خودت رو ذخیره کن
کجا ذخیره کن این وضعیتت رو؟
توی ویومدل
و از اونجایی که ویومدل من وابسته هست به لایف سایکل اکتیویتی
پس آخرین استیت اسکرول من سیو میشه

ما زمانی که میخوایم استیتی رو ذخیره کنیم حالت های مختلفی داره
این موضوع برای اکثر ویوها کاربردیه
مثل ریسایکلر ویو - مثل اسکرول ویو -...
اون پوزیشن یا استیت رو بر اساس پارسیلبل ذخیره میکنن
یعنی کل استیت رو میاد توی پارسیلبل ذخیره میکنه
و وقتی که شما میخواید دریافت کنید دوباره از پارسیلبل میگیره و در اختیارت قرار میده

Post & PostDelay------------------------------------------------------------------------------------
post{
//some code
}

اینا میان یک کاری رو روی ترد اصلی انجام میدن
پست دیلی یک دیلی هم اعمال میکنه
چون ممکنه گاهی ترد ui ما در دسترس نباشه
برای اینکه خیالمون از کرش نکردن راحت باشه
توسط runnable یک کاری رو انجام میده

Convert Hex code to color---------------------------------------------------------------------------
                itemsColor.setBackgroundColor(android.graphics.Color.parseColor(item.hexCode))

BottomSheetDialog round corners---------------------------------------------------------------------

روش های مختلفی برای این کار وجود داره که توی پروژه های قبلی استفاده کردیم
این هم یک روش خیلی ساده و با پرفورمنس خوب هست
    //Theme
    override fun getTheme() = R.style.RemoveDialogBackground

EventBus--------------------------------------------------------------------------------------------
وقتی از ایونت باس صحبت میکنیم لزومت منظورمون اون کتابخونه نیست
چون کتابخونه هه یکم قدیمی شده
منظورمون سازوکار ایونت باس هست
مثل آبزرو و آبزروبل که یک سازوکار هستن
و مثلا آرایکس به یک شکلی پیاده ش کرده
فلو به یک شکلی پیاده ش کرده
ولی سازوکار همونه
پس ایونت باس هم یک سازوکار و یک استاندارد هست

-----------------------------------------------------------------------------سازوکار سرچ و سرچ فیلتر
یک ویومدل مشترک داریم
وقتی یک فیلتری سلکت میشه
یک متدی رو صدا میزنیم و این فیلتر رو میفرستیم
لایودیتایی که داریم پست ولیو میشه
توی صفحه سرچ این لایودیتا رو ابزرو میکنیم
به همین راحتی
همیشه جفت اینا توی یک صفحه بود
الان دیتا رو یک فرگمنت میفرسته و ابزرور توی یک فرگمنت دیگه هست
این روش از نظر کد خیلی تمیزه

Drop & DropLast-------------------------------------------------------------------------------------
گاهی ما یک لیستی داریم که مثلا آیتم اولش یا آخرش رو نمیخوایم
مثلا توی لیست کتگوری ها که از سمت سرور میاد آیتم آخر کاملا اضافه ست.
در این موارد از دستور زیر استفاده کنید
list.dropLast(1)
طبیعتا بیشتر از یک دونه رو هم میشه حذف کرد
drop()
dropLast()
dropWhile {}
dropLastWhile{}

Style ----------------------------------------------------------------------------------------------
زمانی که توی فایل تم یک استایلی رو با دات تعریف میکنید اسمش رو
Widget.Tooltip
مثل بالا حتما باید یک پرنتی رو براش تعریف کنید
در غیر این صورت ارور میگیرید
اکه پرنت ندارید یک استرینگ خالی بدید بهش


ارسال اطلاعات توی آداپتر تو در تو با استفاده از لامبدا--------------------------------------------------
توی آداپتر کتگوری ها به این موضوع بر میخوریم
حالا چطوری باید هندل کینم این موضوع رو؟
قبلا میومدیم به جای لامبدا از اینترفیس استفاده میکردیم که باید یک فایل جدا براش تعریف میکردیم
اینترفیس مثل یک شلنگ عمل میکنه
یک سرش به بک شیر آب وصله و سر دیگه ش رها شده
هر وقت شیر آب رو باز کنیم اون طرف آب جاری میشه
ولی یکم دردسرش زیاده و فایل اضافه و این ها
لامبدا خیلی کوتاه تر راحت تر کار رو میبره جلو
پس یکی از کاربردهای لامبدا ارسال اطلاعات هست

یک لامبدا توی آداپتر داخلیه تعریف میکنیم
یک لامبدای دیگه با همون پارامترها توی آداپتر اصلیه
و اینو توی فرگمنت صدا میزنیم
اطلاعات و عملیات ها دست به دست میشن...

ارسال اطلاعات بین فرگمنت باتم شیت و فرگمنت عادی-------------------------------------------------------
روش های مختلفی برای این کار وجود داره
قبلا روش اینکه موقع بسته شدنش دیتا رو پاس بده رو انجام داده بودیم
روش دیگه استفاده از ایونت باس هست
روش دیگه که ما میخوایم توی صفحه فیلتر کتگوری ها استفاده کنیم
استفاده از اکتیویتی ویومدل هست
یک ویومدل مشترک بین دو تا فرگمنت

نکته طراحی------------------------------------------------------------------------------------------
الان طراحی مینیمال خیلی ترنده
دنبال طرح هم بودین سرچ کنید
توی دریبل - اپ لپس - پینترست
سرچ کنید mobile minimal ui

persian calender------------------------------------------------------------------------------------
برای تقویم توی این پروژه هم از کتابخونه علی آب استفاده میکنیم که کتابخانه خیلی خوبیه

نکته مهم:
شما زمانی که میخواید روی ادیت تکست و مشتقاتش کلیک کنید
نمیتونید از setOnClickListener استفاده کنید
چون باگ به وجود میاره
چون با یک بار کلیک کیبورد باز میشه
و اگه دوباره کلیک کنی اون موقع مثلا دیالوگ باز میشه
پس میایم از setOnTouchListener استفاده میکنیم

            birthDateEdt.setOnTouchListener { _, event ->

            یعنی فشار دادن
            چون تاچ حالت های مختلف داره
            مثل درگ کردن به چپ و راست
                if (event.action == MotionEvent.ACTION_DOWN) {
                    openDatePicker()
                }
                false
            }

Payment gateway-------------------------------------------------------------------------------------
برای درگاه پرداخت برای اینکه مجبور نشیم برای تست پرداخت واقعی کنیم
از sandBox استفاده میکنیم
به معنی جعبه شن هست که هرچی ازش برداریم کم نمیشه
برا همین صرفا دکمه های پرداخت موفق و ناموفق برای بازگشت به اپ رو مستقیم میبینیم

Convert date to Farsi-------------------------------------------------------------------------------
برای تبدیل تاریخ میلادی به شمسی یک کلاس سنگینیی هست که اکثرا از همون استفاده میکنن
کلاس جاوایی هست
و آدمای زیادی روش کار کردن
و خیلی پربار و خوبه همه حالت ها رو در نظر گرفته
و امتحانشو پس داده

بعد هم در قالب اکستنشن قرارش دادیم

Glide vs Coil---------------------------------------------------------------------------------------
هر دوی این کتابخانه ها فوق العاده هستند
کویل سبک تره - با کاتلین و کروتین نوشته شده
گلاید با جاوا نوشته شده و اخیرا داره یه بخش هاییش کاتلیتی میشه
در مجموع گلاید یه لول قوی تر هست
اکستنشن مربوط به لود عکس با هر دو رو داخل این پروژه داریم

نکته - کد مربوط به استراتژی کش کردن عکس توی گلاید:
        .diskCacheStrategy(DiskCacheStrategy.RESOURCE)
