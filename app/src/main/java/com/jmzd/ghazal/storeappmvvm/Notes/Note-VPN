VPN-------------------------------------------------------------------------------------------------
برای چک کردن وی پی ان روش های مختلفی وجود داره

بعضبا میان از آی پی استفاده میکنن
مثلا رنج آیپی ایران رو دارن
که خیلی راحت از طریق سرچ به دست میاد
برای آیپی های خار از این رنج پیغام خطا نشون میدن
توی این روش کاربرای خارج از ایرانت رو هم از دست میدی
که روش درستی نیست

ما اینجا میخوایم واقعا خود وی پی ان رو بررسی کنیم
چون سرور ما داخل ایرانه و خود دیتا سنترها گاهی رو وی پی ان اختلال میندازن یا کند میکنن و...

چک کردن وی پی ان کلا شبیه چک کردن کانکشن هست
و توی ماژول چک کانکشن مینویسیمش

----
ما تا به الان یاد گرفتیم
بعضی از مواردی که میخواستیم برای چک کردن ها بنویسیم رو میومدیم داخل کلاس جدا می نوشتیم
مثل کلاس InternetConnectionChecker
یک حالت دیگه هم داریم که میتونیم این ها رو داخل ماژول بنویسیم
شبیه CheckConnectionModule
که موارد اصلی که اون کلاسمون نیاز داشت رو توش تامین میکردیم
موارد مشابه مثل کال بک های دیگه رو هم میتونیم داخل همین ماژول تعریف کنیم
کال بک رو یک بار داخل کلاس تعریف کردیم حالا داخل ماژول تعریف میکنیم این دفعه

Code------------------------------------------------------------------------------------------------
    @Provides
    @Singleton
    fun provideCheckVpn(

نیاز به یک منیجر دارم که بر اساس اون این چک کردن ها رو انجام بدم
مثلا رجیستر کنم با رجیسترش رو لغو کنم
رجیستر چی بود؟
میگفتیم مثلا اگه روی یک منیجری داریم از رجیستر استفاده میکنیم
برای مثال رجیستر نتورک کال بک
اون تنظیماتی که داریم بر روی نتورکش انجام میدیم رو  برامون رجسیتر میکنه
منم الان نیاز به یک منیجر دارم که اون ریکوعست و اینا رو روش ست کنم
و خب این منیجر رو قبلا برای چک کانکتیویتی تامین کردیم. از همون استفاده میکنیم
    manager: ConnectivityManager,

    @Named(NAMED_VPN) request: NetworkRequest):

ما یک حالت بازگشتی داریم که دو تا حالتم بیشتر نداره. یا وصله یا وصل نیست
پس از فلو استفاده میکنم که اون تغییرات لحظه ای رو داشته باشم
نوعش هم بولین
            Flow<Boolean> =

چون کال بک میخوایم و این چیزایی که داریم میبریم جلو بر اساس یک کال بکیه از کال بک فلو استفاده میکنیم
چون میخوایم به چنل هم دسترسی داشته باشیم که توی MVI باش آشنا شدیم
و با چنل های کروتین کار کردیم
             callbackFlow {

اینا رو توی توضیحات رجیستر گفتم چین و چرا
        val callback = object : ConnectivityManager.NetworkCallback() {
            override fun onAvailable(network: Network) {

چون توی کال بک فلو هستیم به این چنل ها دسترسی داریم
حالا انا دو تا متد دارن برای فرستادن
send & trySend
با سند که قبلا کار کردیم
اینجا از ترای سند استفاده میکنیم
                channel.trySend(true)
            }

            override fun onLost(network: Network) {
                channel.trySend(false)
            }
        }

اینجا باید رجیستر منیجر رو انجام بدیم با اون تنظیمات مورد نظرمون
پارامتر اولش که از نوع نتورک ریکوعست یا همون تنظیمات اختصاصی نتورکی هست که مینویسیم و تامین میکنیم
پارارمتر دومش از نوع ConnectivityManager.NetworkCallback()
اینو از کجا میاریم معمولا؟
این اون کال بکیه که دو تا متد آن لاست و onAvailable رو اورراید میکنه
توی مثال چک کانکتویتی کلاسمون ازش ارث بری میکرد و ما this رو بهش میدادیم
توی مثال وی پی ان کلا ریختیمش توی یک متغیر
که این میگه وقتی اون مثلا قطع و وصل شدنه بر اساس اون تنظیمات نتورک ریکوعستی که بت دادم رخ داد
حالا چی بشه
که ما معمولا یک فلویی لایودیتایی چیزی داریم این وسط که میایم مقدار جدیده رو بهش میدیم
و اینو کلا میایم ریترن میکنیم

        manager.registerNetworkCallback(request, callback)


در نهایت هم میایم آن رجیسترش رو مینویسیم
        awaitClose {
            manager.unregisterNetworkCallback(callback)
        }
    }


--------------------------------------------------------------------------------
    @Provides
    @Singleton
    @Named(NAMED_VPN)
    fun provideNrVpn(): NetworkRequest = NetworkRequest.Builder().apply {
        addTransportType(NetworkCapabilities.TRANSPORT_VPN)

ما از حالت removeCapability هم استفاده میکنیم اینجا که هر زمان از دسترس خارج شد بفهمیم
        removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_VPN)
    }.build()

How To Use------------------------------------------------------------------------------------------
میریم داخل فرگمنتی که میخوایم به شکل زیر استفاده میکنیم
    @Inject
    lateinit var checkVpn: Flow<Boolean>
    .
    .
    .
            //Check VPN
            lifecycleScope.launch {
                checkVpn.collect {
                    showVpnDialog()
                }
            }