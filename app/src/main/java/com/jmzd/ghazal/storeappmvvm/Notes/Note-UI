Lottie----------------------------------------------------------------------------------------------
res -> RClick -> new android resource directory -> raw -> insert your animation here

then use it like this :

    <com.airbnb.lottie.LottieAnimationView
        android:id="@+id/animationView"
        android:layout_width="match_parent"
        android:layout_height="@dimen/_180mdp"
        android:layout_marginTop="@dimen/_10mdp"
        app:lottie_autoPlay="true"
        app:lottie_loop="false"
        app:layout_constraintTop_toBottomOf="@id/infoTxt"
        app:lottie_rawRes="@raw/lottie_phone" />

Focusable Attr--------------------------------------------------------------------------------------
این ویژگی ها که داخل لایه روت صفحات لاگین گذاشتیم به چه دردی میخورن؟

    android:focusable="true"
    android:focusableInTouchMode="true"

توی صفحاتی که ما ادیت تکست داریم
زمانی که صفحه من ساخته میشه به صورت خودکار کیبورد میاد بالا
این ممکنه چیزی نباشه که خیلی جالب باشه
این کدها رو میزنیم که از این اتفاق جلوگیری کنیم
میایم این دو تا فوکوس رو روی یک ویوی خنثی میذاریم
همون اول کار روی اینا فوکوس میشه
دیگه کیبورد اینا الکی باز نمیشن

PinView----------------------------------------------------------------------------------------------
    <com.goodiebag.pinview.Pinview
        android:id="@+id/pinView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/_15mdp"
        app:forceKeyboard="false"
        app:hint="0"
        app:inputType="number"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@id/animationView"
        app:pinBackground="@drawable/bg_otp" // این یک بک گراند است که با سلکتور ساخته شده
        app:pinHeight="@dimen/_35mdp"
        app:pinLength="4"
        app:pinWidth="@dimen/_35mdp"
        app:textSize="@dimen/_6font_mdp" />

LinearProgressIndicator-----------------------------------------------------------------------------
        <com.google.android.material.progressindicator.LinearProgressIndicator
            android:id="@+id/timerProgress"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:indeterminate="false"//
            android:max="60" // چون ۶۰ ثانیه هست تایمرمون
            android:progress="60"
            android:rotation="180" // RTL
            app:indicatorColor="@color/darkTurquoise" //رنگ ها
            app:trackColor="@color/lightTurquoise" // رنگ ها
            app:trackCornerRadius="@dimen/_8mdp"
            app:trackThickness="@dimen/_40mdp" />

Customize Bottom Nav--------------------------------------------------------------------------------

    <com.google.android.material.bottomnavigation.BottomNavigationView
        android:id="@+id/bottomNav"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="@dimen/_30mdp"
        android:layout_marginBottom="@dimen/_20mdp"
        android:background="@drawable/bg_bottom_menu" // بک گراند دلخواه
        android:outlineAmbientShadowColor="@color/eerieBlack" //سایه رنگی توی api های زیر ۲۸ دیده نمیشه و طوسیه
        android:outlineSpotShadowColor="@color/eerieBlack" // سایه رنگی توی api های زیر ۲۸ دیده نمیشه و طوسیه
        android:paddingVertical="@dimen/_3mdp"
        app:elevation="@dimen/_50mdp"
        app:itemIconSize="@dimen/_15mdp" // سایز آیکون های منو
        app:itemIconTint="@color/item_bottom_nav_tint"// رنگ آیکون ها (سلکتور)
        app:itemRippleColor="@color/darkStrategy" // وقتی روی آیتم ها کلیک میشه ریپل چه رنگی باشه
        app:itemTextAppearanceActive="@style/BottomNavigationViewFont" // برای ست کردن فونت باید اسستایل بدیم چون اینجا از کالی گرافی نمیخونه
        app:itemTextColor="@color/item_bottom_nav_tint" //برای ایجاد رنگ هایی که تو حالت سلکت رنگ متفاوتی دارن توی پوشه کالر باید تعریف کنیم تا با حالت سلکتور باشن
        app:labelVisibilityMode="selected" // فقط وقتی سلکت است لیبل رو ببینیم
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:menu="@menu/menu_home"
        tools:targetApi="p" />

استایل
    <!--Bottom navigation font-->
    <style name="BottomNavigationViewFont" parent="@style/TextAppearance.AppCompat.Caption">
        <item name="android:textSize">@dimen/_8font_mdp</item>
        <item name="fontFamily">@font/iransans</item>
    </style>
برای فهمیدن پرنت ها از داکیومنت های متریال ۲ یا ۳ برید بخونید
یادآوری:
وقتی استایل مینویسیم
اونا که اندروید هست رو باید بنویسیم
اونا که اپ هست رو لازم نیست بنویسیم
فونت:
فونت فمیلی رو از اپ بردارید
(چون برای اندروید هم داره ولی اگه بخوایم روی همه دستگاه ها اعمال شه از اپ استفاده کنید)
کلا اتریبیوت هایی که هم اندروید دارن هم اپ اگه بیاید از اندرویدش استفاده کنید
میاد از اون ورژنی که واقعا داره ساپورت میشه به بعد رو نشون میده
ولی اپ نه
همه ورژن ها رو پوشش میده
دایرکتوری فونت:
باید بسازیمش و فونت ها رو بندازیم توش
توی کالی گرافی نیاز نبود این فولدر ساخته شه

        app:itemTextAppearanceActive="@style/BottomNavigationViewFont.Active"
        app:itemTextAppearanceInactive="@style/BottomNavigationViewFont"
        میشه دو تا استایل جداگانه برای حالت اکتیو و دی اکتیو ساخت حتی

Shapeable ImageView---------------------------------------------------------------------------------
    <com.google.android.material.imageview.ShapeableImageView
        android:id="@+id/avatarImg"
        style="@style/ColoredShadowDark" // برای سایه های رنگی توی کل اپ استایل نوشتیم
        android:layout_width="@dimen/_35mdp"
        android:layout_height="@dimen/_35mdp"
        android:layout_marginTop="@dimen/_10mdp"
        android:layout_marginEnd="@dimen/_15mdp"
        android:background="@color/white"
        android:elevation="@dimen/_15mdp"
        android:padding="@dimen/_1mdp"
        android:scaleType="centerCrop"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:shapeAppearance="@style/CircleImage" // کرنرها
        app:strokeColor="@color/water"
        app:strokeWidth="@dimen/_1mdp" />

Progress bar----------------------------------------------------------------------------------------
    <ProgressBar
        android:id="@+id/avatarLoading"
        android:layout_width="@dimen/_20mdp"
        android:layout_height="@dimen/_20mdp"
        android:elevation="@dimen/_16mdp"
        android:theme="@style/DarkProgressbar" // رنگشو با تم عوض میکنیم
        app:layout_constraintBottom_toBottomOf="@id/avatarImg"
        app:layout_constraintEnd_toEndOf="@id/avatarImg"
        app:layout_constraintStart_toStartOf="@id/avatarImg"
        app:layout_constraintTop_toTopOf="@id/avatarImg" />

CarouselRecyclerview--------------------------------------------------------------------------------
     <com.jackandphantom.carouselrecyclerview.CarouselRecyclerview
         android:id="@+id/bannerList"
         android:layout_width="match_parent"
         android:layout_height="@dimen/_145mdp"
         android:visibility="gone" />

         برای حالت افکتی که بنرهامون قراره داشته باشن

CircleIndicator2 -----------------------------------------------------------------------------------
      <!--Banner indicator-->
      <me.relex.circleindicator.CircleIndicator2
          android:id="@+id/bannerIndicator"
          android:layout_width="wrap_content"
          android:layout_height="@dimen/_10mdp"
          android:layout_gravity="center_horizontal"
          app:ci_drawable="@drawable/indicator_selected" //رنگ ها در حال انتخاب
          app:ci_drawable_unselected="@drawable/indicator_unselected" // رنگ ها در حالت عادی
          app:ci_margin="@dimen/_3mdp"
          app:circularflow_defaultRadius="@dimen/_5mdp" />

View Stub-------------------------------------------------------------------------------------------
این یک ویوی خیلی ناشناخته هست که پرفورمنس شما رو از ۶۰ میرسونه به ۹۰

include vs viewStub:
از نظر عملکردی مشابه هم هستن
جفتشونم ویوهایی که جای دیگه ای ساخته شدن رو میان نشون میدن
(چون تعداد خط کد توی لایه از 700 800 تا بره بالاتر پرفورمنس میترکه و صفحه دیر لود میشه)

ولی چه فرقی دارن؟
فرقشون زمین تا آسمونه
توی پیش نمایش لایه وقتی اینکلود رو سلکت میکنیم نشون میده و سلکت میشه
ولی ویو استاب رو اصلا نشون نمیده
چرا؟
به یک دلیل خیلی مهم
اینکلود همون اول میاد ویوی من رو جنریت میکنه
یعنی هم زمان با ساخته شدن ui من اینکلودها هم ساخته میشن
ولی ویو استاب رو همون اول نمیسازه
وقتی بهش نیاز پیدا میکنید میسازدش
شبیه اتفاقی که توی ریسایکر ویو می افته و تا زمانی که ویو توی اسکرین ظاهر نشده جنریت نمیشه
بی نهایت پرفورمنس رو میبره بالا توی صفحات سنگین
مثلا تا قبل اینکه دیتا از api بیاد هم چیزی نمیسازه
ما بهش میگیم کی بساز لایه رو.
با استفاده از inflate
جلوتر یاد میگیریم
----------------------------------------------------
برای هندل کردن ریسایکلرویوهای هوم:
روش اول
یک  روش استفاده از ویو استاب هست که خیلی سنگینی لود شدن صفحه رو کم میکنه

روش دوم
به جای استفاده از ویو استاب میتونید از کاستوم ویو هم استفاده کنید...
ولی توی این دوره جاش نیست
ولی پرهزینه و ایناست کلا

روش سوم
استفاده از ریسایکلرویو
یعنی ریسایکلرویو داخل ریسایکلر ویو
به صورت داینامیک
جلوتر نستد ریسایکلر ویو یا نستد اداپتر رو یاد میگیریم
ولی برای اینجا سنگینه چون آیتم هایی که اینا دارن محاسبا سنگین داره
-------------------------------------------
نحوه استفاده از ویو استاب:
کد مربوط به فرگمنت هوم
            if (mobileLay.parent != null) {

با این  خط کد خیلی راحت اون لایه اینفلیت میشه و نشون داده میشه
                val mobileInflate = mobileLay.inflate()

برای دسترسی به ویوهای داخلی ویواستاب باید مقدار بالا رو توی یک متغیر بریزیم
و به این شکل با آیدی بهشون دسترسی پیدا کنیم
                mobileInflate.findViewById(R.id.mobileProductsList)

            }

یک نکته مهم هم داره این عملیات:
اگه این رو رعایت نکنیم ممکنه به ارور بخوریم و پیدا کردن ارورش هم سخته
زمانی که میخوای اینفلیت کنی
اینفلیت یعنی چی؟
یعنی بیا یک ویویی رو به یک کلاسی چیزی بچسبون که من بتونم ازش استفاده کنم
و برای اینکه بتونی اینفلیت کنی باید بدونه که به چی باید اینفلیت بشه
اینجا به چی باید اینفلیت بشه؟
به پرنتش
بعضی وقتا دسترسی به پرنت نداره.کی؟
موقع جا به جایی سریع بین صفحات
موقع دیلی ریزی پیش بیاد
پس قبل اینفلیت شدن نال بودن پرنت رو چک کنید

Styles-----------------------------------------------------------------------------------------------
به طور کلی وقتی روی ویژگی های عمومی که توی همه ویوها مشترکن استایل مینویسیم
نیازی به پرنت نداریم

--------------------------------------------------------------------------------------------روبان کج
تکنیک ساختن یک ویویی که یه حالت روبان کج داره

برای شروع یک تکست ویوی ساده میسازیم که یک بک گراند رنگی داره
بعد خیلی راحت از طریق مارجین و روتیت به شکلی که میخوایم در میاریمش
android:rotation="45"
با ویژگی بالا کج میشه ولی توی جای مناسبی قرار نمیگیره
میایم یک مارجین اندی بهش میدیم که جاش تنظیم شه


        <!--Discount-->
        <TextView
            android:id="@+id/itemDiscount"
            android:layout_width="0dp"
            android:layout_height="@dimen/_20mdp"
            android:layout_marginTop="@dimen/_15mdp"
            android:layout_marginEnd="@dimen/mines50mdp"
            android:background="@color/salmon"
            android:gravity="center"
            android:rotation="45"
            android:textColor="@color/white"
            android:textSize="@dimen/_10font_mdp"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="@id/itemImg"
            app:layout_constraintTop_toTopOf="parent"
            tools:text="2400 ت" />

Enter Button in EditText----------------------------------------------------------------------------
اگه بخوایم به جای دکمه اینتر توی ادیت تکست
مثلا دکمه done داشته باشیم

android:imeOptions="actionDone"

یا مثلا اگه بخوایم بره روی فیلد بعدی

android:imeOptions="actionNext"

تقریبا ده دوازده تا آپشن داره...

angeSlider -----------------------------------------------------------------------------------------
قبلا گوگل اینو نداشت ولی بالاخره اضافه کردش
از این اسلایدرها که میشه رنج توش انتخاب کرد و دو تا سر دارن
شبیه سیک بار اندروید هست
ولی تفاوت هایی دارن با هم


    <com.google.android.material.slider.RangeSlider
        android:id="@+id/priceRange"
        style="@style/MyRangeStyle"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:valueFrom="10" // minimum
        android:valueTo="30000000" //maximum
        app:labelBehavior="withinBounds" // مربوط به افکت نمایش تولتیپ
        app:layout_constraintEnd_toEndOf="@+id/searchEdt"
        app:layout_constraintStart_toStartOf="@+id/searchEdt"
        app:layout_constraintTop_toBottomOf="@+id/priceTxt" />
        اگر مایل نباشید تولتیپ نمایش داده شه میتونید کلا بگید gone شه و...

اگه براش استایل اختصاصی ننویسیم زیاد به درد نمیخوره و زشته

    <!--Range Slider-->
    <style name="MyRangeStyle" parent="Widget.MaterialComponents.Slider"> // پرنتش اسلایدره
        <item name="materialThemeOverlay">@style/BlueSlider</item> // رنگش - تمش که خودمون تعریف کردیم پایین
        <item name="labelStyle">@style/Widget.Tooltip</item> // تولتیپ - پایین تعریفش کردیم
    </style>

    <style name="BlueSlider"> // تم مربوط به اسلایدر رو اینجا تعریف میکنیم
        <item name="colorPrimary">@color/dodgerBlue</item> // دایره ها
        <item name="colorOnPrimary">@color/lavender</item> //خط
    </style>

    <style name="Widget.Tooltip" parent="Widget.MaterialComponents.Tooltip"> // پرنتش تولتیپه
        <item name="backgroundTint">@color/dodgerBlue</item> // رنگ بک گراندش
        <item name="android:textAppearance">@style/TextAppearance.Tooltip</item> // فونتش ایران سنس باشه چون به صورت پیش فرض فونت دیفالت داره. پایین تعریف کردیم اینو هم
    </style>

        <style name="TextAppearance.Tooltip" parent="TextAppearance.MaterialComponents.Tooltip"> // پرنت این هم میشه تولتیپ
            <item name="android:textColor">@color/white</item>
            <item name="fontFamily">@font/iransans</item> // دو تا فونت فمیلی هس که هر دو نیم اسپیس اپ و اندروید رو بیارید چون بعضی اندروید ها از این استفاده میکنه بعضیاش از اون
            <item name="android:fontFamily">@font/iransans</item>
        </style>


برای ایجاد این حالت دو تایی باید توی کد بهش بگیم
که به این منظور متد initPriceRange رو مینویسیم

    private fun initPriceRange() {
        //Label format
        val formatter = LabelFormatter { value ->
            value.toInt().moneySeparating()
        }
        //Customize
        برای پیاده سازی انواع ویژگی هاش از اپلای استفاده میکنیم
        binding.priceRange.apply {

        توسط ست ولیوز میتونیم مقادیر رنج رو بهش بدیم.
        مقدار ورودیش varArgs هست. یعنی بیش از یکی...
        اینا محل قرار گیری اولیه نقطه هامون هستن
        نه مینموم و ماکسیموم خود نمودار
        دیفالت ولیو ها میشن
            setValues(7000000f, 21000000f)

            تغییر دادن مقدار لیبل - سه رقم سه رقم جدا شدن و اینا
            setLabelFormatter(formatter)

            //Listener
            addOnSliderTouchListener(object : RangeSlider.OnSliderTouchListener {
                override fun onStartTrackingTouch(slider: RangeSlider) {

                }


                برای دسترسی به مقادیر اسلایدر
                میدونیم این اسلایدر دو تا مقدار بمون میده
                با استفاده از متد ولیوز این لیست رو میگیریم
                و با ایندکس به مقداراشون دسترسی پیدا میکنیم
                override fun onStopTrackingTouch(slider: RangeSlider) {
                    val values = slider.values
                    minPrice = values[0].toInt().toString()
                    maxPrice = values[1].toInt().toString()
                }
            })
        }
    }

Chip Group------------------------------------------------------------------------------------------
توی آموزش های قبلی بهش پرداخته بودیم اینجا دوباره مرور میکنیم
 <HorizontalScrollView
        android:id="@+id/sortScroll"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="@dimen/_3mdp"
        android:clipToPadding="false"
        android:fadingEdge="horizontal"
        android:requiresFadingEdge="horizontal"
        android:scrollbars="none" // نمیخوایم اسکرول بارش رو نشون بده
        app:layout_constraintTop_toBottomOf="@id/sortTitle">

        <com.google.android.material.chip.ChipGroup
            android:id="@+id/sortChipGroup"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:paddingHorizontal="@dimen/_10mdp"
            app:chipSpacing="0dp"
            app:selectionRequired="true"
            app:singleLine="true"
            app:singleSelection="true" />
    </HorizontalScrollView>


 ----------------استایل ها --------------------
     <!--Chips-->
     <style name="FilterChipsBackground" parent="Widget.MaterialComponents.Chip.Choice">
     // که این یک سلکتوری هست که در حالت سلکت و غیر سلکت براش رنگ های مختلف دادیم
         <item name="chipBackgroundColor">@color/item_chip_background</item>
         <item name="android:clickable">true</item>
         <item name="android:checkable">true</item>
     </style>

     <style name="FilterChipsText">
         <item name="fontFamily">@font/iransans</item>
         <item name="android:fontFamily">@font/iransans</item>
         <item name="android:textSize">@dimen/_9font_mdp</item>
         // که این یک سلکتوری هست که در حالت سلکت و غیر سلکت براش رنگ های مختلف دادیم
         <item name="android:textColor">@color/item_chip_text</item>
     </style>

 --------------------کد جاوا ----------------------

 // در مورد چیپ گروپ به طور کامل توی پروژه رسپی توضیحات داده شده
 واسه همین اینجا خیلی مختصر تر بهش میپردازیم

    private fun setupChip(list: MutableList<FilterModel>) {
        var tempList = mutableListOf<FilterModel>()
        tempList.clear() // چون چرخه حیات ویومدل ما به اکتیویتی وابسته هست این کار رو میکنیم که دیتا نمونه از قبل
        tempList = list
        tempList.forEach {
        به ازای هر آیتم لیست میایم یک چیپ جدید می سازیم
            val chip = Chip(requireContext())

            ظاهر و استایل رو اینجا میدیم بهش
            val drawable = ChipDrawable.createFromAttributes(
                requireContext(), null, 0,
                R.style.FilterChipsBackground
            )
            chip.setChipDrawable(drawable)

            رنگ پیش فرض متن
            chip.setTextColor(ContextCompat.getColor(requireContext(), R.color.white))

            خود متن
            chip.text = it.faName

            آیدی
            chip.id = it.id

            استایل مربوط به رنگ متن ها
            که زمانی که چیپ انتخاب شده با زمانی که انتخاب نشده رنگ متن فرق کنه
            برای این کار یک استایل و یک سلکتور نوشتیم
            chip.setTextAppearanceResource(R.style.FilterChipsText)

            اضافه کردن یه دونه یه دونه چیپ ها به چیپ گروپ و هندل کردن کلیک
            binding.sortChipGroup.apply {
                addView(chip)
                //Click
                setOnCheckedStateChangeListener { group, _ ->
                    sort = tempList[group.checkedChipId - 1].enName
                }
            }
        }
    }


Check Box-------------------------------------------------------------------------------------------
برای کوچیک کردنش از روش زیر استفاده میکنیم
چون با width & height هیچ تغییری نمیکنه سایز باکسش
ولی نکته اینه که اسکیل میاد تکست رو هم کوچیک بزرگ میکنه
پس میایم تکست رو به صورت تکست ویو میاریم توی پروژه
        android:scaleX="0.9"
        android:scaleY="0.9"
برای رنگش
        app:buttonTint="@color/dodgerBlue"

RTL scroll view-------------------------------------------------------------------------------------
            //Rtl scrollview
            lifecycleScope.launch {
                delay(100)
                sortScroll.fullScroll(HorizontalScrollView.FOCUS_RIGHT)
            }

ImageFilterView-------------------------------------------------------------------------------------
برای انداختن انواع طیف رنگی و فیلتر روی تصویر
ولی یک کار باحال دیگه هم میشه باهاش کرد که معمولا با شیپبل ایمیج ویو انجام میدیم
app:roundPercent="1"
اتریبیوت بالا میاد عکس رو کاملا گرد میکنه
البته خب دستمون توی شیپبل ایمیج ویو بازتره یکم
درضمن چون حالت درصدی داره میتونید مثلا ۰.۳ بهش بدید گوشه ها رو یکم گرد میکنه
از صفر تا یک هست مقدارش
یک گرد
صفر زاویه دار
دیگه استایل اینا نمیخواد بنویسید
خیلی باحاله
        <androidx.constraintlayout.utils.widget.ImageFilterView
            android:id="@+id/menuEditImg"
            android:layout_width="@dimen/_30mdp"
            android:layout_height="@dimen/_30mdp"
            android:background="@color/crayola"
            android:padding="@dimen/_7mdp"
            android:src="@drawable/user_pen"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:roundPercent="1"
            app:tint="@color/white" />

Text Input Layout Style-----------------------------------------------------------------------------

    <!--Text input layout-->

اگه یادتون بیاد گفتیم که تکست اینپوت لایوت حالت های مختلفی داره
باکس دورش باشه - خط زیرش باشه ...
پرنت این موضوع رو مشخص میکنه که ما فیلد باکس رو انتخاب میکنیم
    <style name="MediumTurquoiseTextInputLayout" parent="Widget.MaterialComponents.TextInputLayout.FilledBox">

    رنگ بک گراند باکس
        <item name="boxBackgroundColor">@color/cultured</item>

        کرنر رادیوس های باکس که چهار جهت باید جدا نوشته شوند
        <item name="boxCornerRadiusTopStart">@dimen/_10mdp</item>
        <item name="boxCornerRadiusTopEnd">@dimen/_10mdp</item>
        <item name="boxCornerRadiusBottomStart">@dimen/_10mdp</item>
        <item name="boxCornerRadiusBottomEnd">@dimen/_10mdp</item>

        مشخصه این چهار تام چیان
        <item name="boxStrokeWidth">0dp</item>
        <item name="hintAnimationEnabled">true</item>
        <item name="boxStrokeWidthFocused">0dp</item>
        <item name="hintTextColor">@color/gray</item>
        <item name="startIconTint">@color/mediumTurquoise</item>
    </style>


BottomSheets and keyboards--------------------------------------------------------------------------
    <!--Bottom sheet dialog-->
    <style name="RemoveDialogBackground" parent="Theme.AppCompat.Light.Dialog">
        <item name="android:windowBackground">@null</item>

        این استایل باعث میشه کیبور که باز میشه پشت کیبرد نیفته
        و بره بالا
        <item name="android:windowSoftInputMode">adjustResize|stateVisible</item>
    </style>

RatingBar-------------------------------------------------------------------------------------------
            <RatingBar
                android:id="@+id/itemRating"

                این استایل دیفالت خود اندروید هست
                چون پیش فرضش خیلی زشت و گنده هست
                style="@style/Widget.AppCompat.RatingBar.Small"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="@dimen/_5mdp"

                ستاره ها وقتی روشن میشن چه شکلی باشن
                android:progressTint="@color/royalBlue"

                ما میخوایم امتیازات حتما به صورت اینت باشد
                اکه اینو قرار ندیم عدد خرده دار هم میشه داد بهش
                android:stepSize="1"
                app:layout_constraintEnd_toEndOf="@id/line1"
                app:layout_constraintTop_toBottomOf="@id/line1" />


DropDown ft TextInputLayout-------------------------------------------------------------------------
ما خیلی راحت ادیت تکست رو میبریم توی این تکست اینپوت لایوت ها
و این لیبل هاشون میره بالا موقع تایپ
چالشی که داریم اینه که چطور اسپینرها رو ببریم توی این حالت
کاستومایز کردن خود اسپینر سخته و نمیصرفه
ولی خود متریال یک ویویی داره به اسم autoCompleteTextView
که از قدیم هم توی اندروید بوده
از زمان اندروید ۴ - بیش از ده ساله که توی اندروید هست
میاد یه چیزایی رو اون زیر ساجست میده به کاربر
و حالت دراپ داون هم داره
و خیلی خوب هم با تکست اینپوت لایوت مچ میشن
ولی باید استایل بدیم بهش
و برای ست کردن تکست پیش فرضش هم یه مقدار چالش خواهیم داشت

نکته مهم اینکه میایم
android:inputType="none"
قرار میدیم که کاربر نتونه چیزی رو وارد کنه خودش

            <!--Province-->
            <com.google.android.material.textfield.TextInputLayout
                android:id="@+id/provinceInpLay"
                style="@style/MediumTurquoiseDropDownMenu"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_marginStart="@dimen/_5mdp"
                android:layout_marginTop="@dimen/_10mdp"
                android:hint="@string/province2"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toEndOf="@id/guide"
                app:layout_constraintTop_toBottomOf="@id/addressTitle"
                app:startIconDrawable="@drawable/house_building_mini"
                app:startIconTint="@color/darkStrategy">

                <com.google.android.material.textfield.MaterialAutoCompleteTextView
                    android:id="@+id/provinceAutoTxt"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:inputType="none"
                    android:textColor="@color/eerieBlack"
                    android:textSize="@dimen/_10font_mdp" />

            </com.google.android.material.textfield.TextInputLayout>


استایل------------------------------------
خیلی شبیه استایلیه که برای تکست اسنپوت لایوت زدیم ولی چند تا نکته ریز داره
پرنتش خیلی مهمه. که حالت فیلد باکس دراپ داون باشه
برای آشنایی بیشتر با این استایلا وارد سایت متریال دیزاین ۲ بشین
مثلا میخواید بدونید فرق قیلد باکس با اوت لاین چیه
صرفا همین پرنت رو تغییر میدیم و بقیه اتریبیوت ها فرق خاصی با استایل تکست اینپوت لایوت ندارن
    <style name="MediumTurquoiseDropDownMenu" parent="Widget.MaterialComponents.TextInputLayout.FilledBox.ExposedDropdownMenu">
        <item name="boxBackgroundColor">@color/cultured</item>
        <item name="boxCornerRadiusTopStart">@dimen/_10mdp</item>
        <item name="boxCornerRadiusTopEnd">@dimen/_10mdp</item>
        <item name="boxCornerRadiusBottomStart">@dimen/_10mdp</item>
        <item name="boxCornerRadiusBottomEnd">@dimen/_10mdp</item>
        <item name="boxStrokeWidth">0dp</item>
        <item name="hintAnimationEnabled">true</item>
        <item name="boxStrokeWidthFocused">0dp</item>
        <item name="hintTextColor">@color/gray</item>
        <item name="startIconTint">@color/mediumTurquoise</item>
    </style>

کد مربوط به نمایش دیتا داخل دراپ داون---------------------------
تقریبا از نظر عملکرد شبیه به اسپینر هست
توی اسپینر چیکار میکردیم؟
نیاز به یک لیستی داشتیم که به واسطه اون لیست آداپتر رو در میکردیم
بعد از پر کردن آداپتر اون آداپتر رو در اختیار اسپینر قرار میدادیم
و نمایش میداد
اینجا هم سازوکار همونه

    private val provincesNamesList = mutableListOf<String>()
    private lateinit var provincesAdapter: ArrayAdapter<String>
    private var provinceId = 0

    if (data.isNotEmpty()) {

    لیست اسم ها که قراره نشون بدیم
        data.forEach {
            provincesNamesList.add(it.title!!)
        }

        آداپتر رو مثل آداپتر اسپینر پر میکنیم
        لایه ای که بهش میدیم کاستوم هست
        provincesAdapter = ArrayAdapter<String>(
            requireContext(), R.layout.dropdown_menu_popup_item, provincesNamesList
        )

        ست کردن آداپتر روی اتو کامپیلیت تکست ویو و کلیک لیسنر
        provinceAutoTxt.apply {
            setAdapter(provincesAdapter)
            setOnItemClickListener { _, _, position, _ ->
                provinceId = data[position].id!!
                body.provinceId = provinceId.toString()
                if (isNetworkAvailable)
                    viewModel.callCitiesListApi(provinceId)
            }
        }
    }

ست کردن مقدار پیش فرض داخل دراپ داون---------------------
provinceAutoTxt.setText(province?.title)

SetTint extension------------------------------------------------------------------------------------
با این انوتیشن میایم محدودش میکنیم به کالر ریسورس اینتیجرهایی رو که میگیریم
fun ImageView.setTint(@ColorRes color: Int) {
    ImageViewCompat.setImageTintList(this, ColorStateList.valueOf(ContextCompat.getColor(context, color)))
}

.apply----------------------------------------------------------------------------------------------
وقتی دو تا اپلای تو در تو داریم
وقتی نو داخلیه باشیم المان های مربوط به هر دو تا اپلای رو به راحتی میشناسه

ScrollView------------------------------------------------------------------------------------------
        <androidx.core.widget.NestedScrollView
            android:id="@+id/detailScroll"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:fillViewport="true"
            android:scrollbarSize="0dp">// برای اینکه اون بیلبیلک بغل اسکرول ویو دیده نشه

TabLayout & ViewPager-------------------------------------------------------------------------------

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">
        <!--Tab layout-->
        <com.google.android.material.tabs.TabLayout
            android:id="@+id/detailTabLayout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            app:layout_constraintTop_toTopOf="parent"
            app:tabGravity="fill" // تب ها رو به چه صورت بچینه. کلش رو بگیره و فیل شه؟ بره چپ بره راست وسط ...
            app:tabIndicatorColor="@color/royalBlue" // خط زیر تب سلکت شده
            app:tabMode="fixed" // تو کل عرض فیکس شه و اسکرول نشه
            app:tabSelectedTextAppearance="@style/TabLayoutFontBold" // اعمال فونت و استایل به تب. چون فونت اتوماتبک ست نمیشه روی تب لایوت
            app:tabSelectedTextColor="@color/royalBlue" //رنگ
            app:tabTextAppearance="@style/TabLayoutFontNormal" // فونت و استایل
            app:tabTextColor="@color/silver" />  // رنگ
        <!--View pager-->
        <androidx.viewpager2.widget.ViewPager2
            android:id="@+id/detailViewPager"
            android:layout_width="match_parent"
            android:layout_height="@dimen/_180mdp"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintTop_toBottomOf="@id/detailTabLayout" />

    </LinearLayout>

استایل ها----------------------------------------
    <!--Tab layout-->
    <style name="TabLayoutFontNormal" parent="@android:style/TextAppearance.Widget.TabWidget">
        <item name="fontFamily">@font/iransans</item>
        <item name="android:fontFamily">@font/iransans</item>
        <item name="android:textSize">@dimen/_10font_mdp</item>
    </style>

    <style name="TabLayoutFontBold" parent="@android:style/TextAppearance.Widget.TabWidget">
        <item name="fontFamily">@font/iransans_bold</item>
        <item name="android:fontFamily">@font/iransans_bold</item>
        <item name="android:textSize">@dimen/_10font_mdp</item>
    </style>

آداپتر-------------------------------------------
برای برقرار کردن ارتباط این دو تا ما نیاز به آداپتر داریم
این آداپتر توی ویوپیجر یک و دو فرق داره کدش
همونطور که میدونید ویوپیجر دو بر اساس ریسایکلر ویو ساخته شده
و خیلی قابلیت های خوبی به ما میده
از جمله اسکرول افقی و عمودی
از نظر پرفورمنسی هم خیلی خوب شده
چون اون سازو کار ریسایکلر ویو اومده توش
ویوپیجر یک ویوی نسبتا سنگینی بود قبلا
که تو ویوپیجر دو خیلی بهتر شده

1-
توی آداپتر باید بیاید از : FragmentStateAdapter اکستند کنید
دو تا ورودی هم داره این
ورودی اول فرگمنت منیجر هست
(وقتایی که از نویگشن کامپوننت استفاده میکنیم نیازی به این فرگمنت منیجر نداریم)
علاوه بر اون نیاز به یک لایف سایکل داریم

تزریق وابستگی-------------------------------------------------
ما آداپتر پیجر رو که میسازیم
دو تا پارامتر باید بهش پاس بدیم به این صورت
class PagerAdapter(manager: FragmentManager, lifecycle: Lifecycle) : FragmentStateAdapter(manager, lifecycle) {
خب تزریق وابستگی این ها رو باید کجا و به چه صورت انجام بدیم؟

ما توی پوشه تزریق وابستگی این پروژه یک ماژول فرگمنت داریم
که رو ی FragmentComponent کار میکنه
و خب پس دسترسی به المان های فرگمنت و لایف سایکل و این ها داریم اینجا

حالا سوال:
چرا اینا رو میایم توی ماژول قرار میدیم تزریقشو؟
چرا مستقیم نمیایم با اتساین اینجکت کار رو پیش ببریم؟
جواب:
ما وقتی داخل کانستراکتور تزریق وابستگی میزنیم که میخوایم خود کلاس تزریق شه
ولی پارامترهای داخلیش باید قبلا یه جا تزریق شده باشن
به جز مواردی که خود هیلت زحمتش رو کشیده برامون
مثل کانتکس

حالا اینجا من باید یک چیزی داشته باشم که کامپننت مخصوص  فرگمنت رو بهم بده
یا مثلا اگه با اکتیویتی کار دارم باید یک چیزی داشته باشم که اون کامپننت خاص اکتیویتی رو بهم بده
اینو قبلا یاد گرفتیم تو بخش هیلت که چطوریه
پس میریم کامپننت ها رو از اونجا برمیداریم

پس تزریق وابستگی های اینجا حتما باید داخل فرگمنت کامپننت انجام شن

حالا میایم فرگمنت رو به عنوان پارامتر ورودی بهش میدیم و از طریق اون چیزهایی که میخوایم رو تامین میکنیم
    @Provides
    fun provideFragment(fragment: Fragment) = PagerAdapter(fragment.parentFragmentManager, fragment.lifecycle)

هیچ چیز دیگه ای نیاز نداریم و هیچ کار دیگه ای لازم نیست انجام بدیم برای پاس دادن این فرگمنت
تمام

WOW!

ارسال آیدی به فرگمنت داخل پیجر----------------------------------
ما توی بخش های قبل آیدی رو به کمک نویگیشن و به صورت آرگز میفرستادیم
ولی خب اینجا که با نویگیشن کار نکردیم
از طرفی ساز و کار ویو پیجر به این صورت هست که
وقتی شما اونو یه جا قرار میدید
حالا فرگمنت یا اکتیویتی
بعد از اینکه لایف سایکل اون پرنته ساخته میشه ویو پیجر هم ساخته میشه
میاد اتوماتیک تمام اون فرگمنت های داخلی رو میسازه
پس تو این حالت اصلا من نویگیشنی ندارم
در واقع اصلا نویگشنی اتفاق نمی افته
پس آیدی رو چطور بفرستم؟

روش های مختلفی داره:
1- event bus:
بیایم از سازوکار ایونت باسی که نوشتیم استفاده کنیم

2- shared view model:
چون ویو مدل ما مشترک هست خیلی راحت میتونیم برای آیدی ازش استفاده کنیم
برای این کار باید به اکتیویتی ویومدل تبدیلش کنیم

Constraints min & max height & width----------------------------------------------------------------
        app:layout_constraintHeight_max="@dimen/_130mdp"
        app:layout_constraintHeight_min="@dimen/_120mdp"

        app:layout_constraintWidth_max="@dimen/_180mdp"
        app:layout_constraintWidth_min="@dimen/_130mdp"

توی لایوتی که برای نمایش آیتم کامنت ها طراحی کردیم این دو تا اتریبیوت رو میبینیم
ولی اینا چی هستن
چرا برای عرض یک مینیموم و ماکسیمومی رو در نظر گرفتیم؟
برای اینکه نمیخوایم ارتفاع لایه ما از یک حدی کمتر و از یک حدی بیشتر باشه

Bottom nav badge------------------------------------------------------------------------------------
خود باتم نویگیشن یک کدی داره که میتونی بج اضافه کنی یا پاک کنی

برای پاک کردن بج
باید آیدی اون آیتم رو بهش بدیم
bottomNav.removeBadge(R.id.cartFragment)

برای اضافه کردن بج
bottomNav.getOrCreateBadge(R.id.cartFragment).apply {
   number = data.quantity.toString().toInt()
   backgroundColor = ContextCompat.getColor(this@MainActivity, R.color.caribbeanGreen)
  }

show / hide items with recyclerView Scroll event----------------------------------------------------
این کد توی صفحه سبد خرید برای دکمه ادامه استفاده شده

        binding.apply {

            //Fab animation
            از کجا بفهمیم ریسایکلر داره اسکرول میشه؟
            با این لیسنر
            که هم اسکرول چپ و راست رو تشخیص میده هم بالا و پایین
            cartsList.addOnScrollListener(object : RecyclerView.OnScrollListener() {
                override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                    super.onScrolled(recyclerView, dx, dy)

                    ما اسکرول عمودی و روی محور وای رو نیاز داریم
                    ما به جای fab عادی از extended استفاده کردیم
                    که این isExtended به همین ویژگیش اشاره داره
                    if (dy > 0 && continueFABtn.isExtended)

                        شرینک یعنی حالت جمع شده. جمعش کن
                        continueFABtn.shrink()
                    else if (dy < 0 && !continueFABtn.isExtended)
                        continueFABtn.extend()
                }
            })
        }
