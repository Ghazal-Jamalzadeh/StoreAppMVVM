
SMS & HashCode--------------------------------------------------------------------------------------
خب برای اوتو فیل شدن اس ام اس ها یک هش کد نیاز داریم
هش کد یک کد یوتنیک هست
ما توسط این کد متوجه می شیم که ای اس ام اس برای اپلیکیشن ما اومده
ما این هش کد رو باید کاملا اختصاصی برای اپلیکیشن خودمون درست کنیم  و بفرستیم سمت سرور
وقتی شماره موبایل رو وارد مکینیم این هش کد رو هم میفرستیم برای سرور
توی اس ام اسی که برای ما فرستاده میشه بک این هش کد ته اس ام اس فرستاده میشه
هش کد کاملا یونیک و از ۸ تا ۱۲ کاراکتر هست
جلوتر توسط برادکست رسیورها این اس ام اس ها رو میخونیم
و میبینیم آیا انتهاش یک هش کد مانندی داره
و اگه داره همون هش کدیه که من میخوام یا نه
اگه همونی که دنبالش هستیم باشه متن اس ام اس رو توسط برادکست رسیور میگیریم و کدی که میخوایم رو دستی از توش در میاریم
اگه ایمیل باشه نیازی به هش کد نیست چون اوتو فیل نداریم

-------------------------------------------پیاده سازی فایربیس (کنسول)
برای پیاده سازی این سازوکار باید از سرویس های گوگل استفاده کنیم
این هش کدها توسط یک سری الگوریتم های خیلی پیچیده و خاص توسط خود گوگل تولید میشن

1- add dependencies to gradle
    //Receive OTP
    implementation 'com.google.android.gms:play-services-base:18.2.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:18.0.1'

2- add this plugin to gradle
plugins {
    id 'com.google.gms.google-services'
}

3- add this line of code to build.gradle (module level)
plugins {
    id 'com.google.gms.google-services' version '4.3.14' apply false
}

4- sync project
چون سرویس های خود گوگل هستن باید وی پی ان خوبی برای دور زدن تحریم هاش داشته باشید

5- error: file google-services.json is missing
چون زمانی که میخوااید از پلی سرویس ها استفاده کنید باید اپلیکیشنتون رو توی فایربیس معرفی کنید
بعد معرفی اون یک فایل جیسون میده به ما
که نشون میده اپلیکیشن ما توی fcm یا فایربیس ثبت شده
و ما بتونیم استفاده کنیم
تحریم های فایربیس یکی از شدید ترین تحریم هاست

6- open firebase console
https://console.firebase.google.com/u/0/?pli=1
create project -> choose a delkhah name -> create project
or -> go to console (to visit your previous projects)
https://console.firebase.google.com/u/0/project/storeapp-ed947/overview

7- now choose a platform (circular icons)(ios | android | flutter | unity |...)
-> android ->
package name : gradle -> application id -> com.jmzd.ghazal.storeappmvvm
nickname (optional) : delkhah name -> StoreAndroidApp
SHA1 debug (optional) : nazdim felan
-> register app

8- download json
project view -> app -> paste json file here

9-
پیشنهاد میده یک سری دپندنسی ها رو اضافه کنیم که ما قبلا کردیم
-> next

--------------------------------------------- تولید هش کد
برای ساخت هش کد گوگل خودش الگوریتمش رو قرار داده
همون رو باید کپی کنیم توی پروژه و استفاده کنیم
فقط این الگوریتم قبلا به صورت جاوا بود
و نسخه جدیدش که کاتلین شده کلا فرق کرده و با یک روش دیگه رفتن جلو
ما از همون نسخه جاوایی الگوریتم استفاده میکنیم و خودمون تبدیل میکنیم به کاتلین
چرا از الگوریتم قدیمی استفاده میکنیم؟
چون توی ورژن جدید الگوریتم فقط روی اندروید های بالاتر کار میکنه

برای خوندن هش کد نیاز به دو تا کلاس داریم
کلاس اولی که کد رو برای ما جنریت میکنه
دومی یک کلاس برادکست رسیور هست که اطلاعات اس ام اس رو بخونه

کلاس های مربوط به این بخش رو توی utils و otp قرار میدیم
BroadCastReceiver-----------------------------------------------------------------------------------
تا الان دیدید که ما از ابزرورها استفاده میکردیم که هر تغییری توی اپلیکیشنمون رخ میده اطلاع داشته باشیم
ولی بعضی وقتا پیش میاد که بعضی از این تغییرات داخل اپلیکیشن ما نیست
اس ام اس مثلا - یا تماس - باتری
من میتونم روی این عوامل خارجی یک سری دسترسی هایی داشته باشم و بخونمشون
برای این کار از برادکست رسیورها و سرویس ها استفاده میکنیم
قبل تر ها که لایودیتا و آرایکس نبود برای یک سری ایونت های داخل اپلیکیشن هم از برادکست ها استفاده میشد
ایونت باس بعدا اومد که اونم خیلی خوبه

خب پس به طور کلی برادکست رسیور چیزیه که ما رو از تغییرات خارجی مطلع میکنه

----------------------------------------پیاده سازی
1- create a class that extends : BroadcastReceiver()

2- implement methods : onReceive

3- SmsRetriever
برای گوش دادن به اس ام اس ها از یک کلاسی استفاده میکنیم به اسم SmsRetriever
این مال خود اندروید است
مال یکی از همون دو تا دپندسی هاس که اضافه کردیم
implementation 'com.google.android.gms:play-services-auth-api-phone:18.0.1'

#intent ?
اینتنت یک حالتیه که ما توسط اون میتونیم
 با صفحات مختلف اپلیکیشن خودمون
  یا با صفحات مختلف اپلیکیشن های دیگه
  یا با بخش های اپلیکیشن های دیگه میتونیم ارتباط برقرار کنیم

چک میکنیم اگر اون اکشنی که از اینت اومده اکشن دریافت اس ام اس هست...
        if (SmsRetriever.SMS_RETRIEVED_ACTION == intent.action) {

اطلاعاتی که اینتنت حمل میکنه در قالب extras هست
            val extras = intent.extras

یک استاتوس هم هست مثل وقتی با api ها کار میکنیم
بفهیمیم ساکسسه اروره چیه
            val status = extras?.get(SmsRetriever.EXTRA_STATUS) as Status

بعد میایم میگیم اگه استاتوس ساکسس بود بیا مسیج رو از توش در بیار
و کد رو میخوایم از توش در بیاریم و استفاده کنیم
            when (status.statusCode) {
                CommonStatusCodes.SUCCESS -> {
                // write your code here
                }
            }

روش های مختلفی برای فرستادن اطلاعات به صفحات مختلف وجود داره
مثل اینترفیس ها و...
ما اینجا از یکی از بهترین روش ها استفاده میکنیم
یعنی توسط لامبدا فانکشن ها
    private var receiveMessage: ((String) -> Unit)? = null
    fun onReceiveMessage(listener: (String) -> Unit) {
        receiveMessage = listener
            }

 //inside success block
   val message = extras.get((SmsRetriever.EXTRA_SMS_MESSAGE)) as String
                     receiveMessage?.let {
                         it(message) }


نکته : دقت کنید که این کلاس همه اس ام اس ها رو نمیخونه
فقط اونایی رو میخونه که هش کدش همون هش کد خودمونه
یعنی اصلا با اس ام اس های متفرقه دسترسی نداره
پس حالت ساکسسش فقط وقتیه که
1- هش کد داشته باشه اون اس ام اس
2- هش کدش با هش کد ما یکی باشه

Generate hash code----------------------------------------------------------------------------------
ما هش کد رو توی اکتیویتی می سازیم. چرا؟
چون یک سری فانکشن ها هستن که ما میخوایم به صورت جنرال استفاده کنیم
نمایم اینا رو به صورت مجزا تعریف کنیم
مثلا یک بار توی لاگین اینجکتش کنیم و بسازیم و یک بار توی وریفای
یک بار توی اکتیویتی می سازیم و بقیه جاها استفاده میکنینم
البته این کارو زیاد و برای همه چیز انجام ندید
چیزایی که مشترک بین چندین صفحه هست
مموری لیک و اینا نشه
بیشتر سعی کنید از اکستنشن فانکشن ها استفاده کنید مثلا
زمانی استفاده کنید که مثلا اون کلاستون حتما نیاز به اکیتیویتی داره و قراره توی چندین صفحه استفاده شه
کارهای ui رو این طوری هندل نکنید اصلا
مموری لیک میشه چون مصرف مموری میره بره و out of memory میشه
کلا استفاده بی رویه از این روش مموری لیک میشه
خوبیش اینه الان این هش کد یک بار درست میشه و تا زمان زنده بودن لایف سایکل اکتیویتی نیازی به تولید مجددش نداریم
البته یاد هم میگیریم چطوری از فرگمنت به فانکشن های اکتیویتی مون دسترسی داشته باشیم

Use Broadcast Receiver------------------------------------------------------------------------------
برای استفاده از برادکست رسیورها به اینتنت فیلتر نیاز داریم
چرا اینتنت فیلتر؟
چون ما با اینتنت دریافت میکنیم موارد مربوط به برادکست رسیور رو

1-
یک متغیر از نوع اینتنت فیلتر تعریف میکنیم
    private var intentFilter : IntentFilter? = null

2-
میایم مقداردهیش میکنیم و اون اکشن مورد نظرمون رو میدیم بهش
مثلا باتریه - تماسه - اس ام اسه - هر چی هست
  intentFilter = IntentFilter(SmsRetriever.SMS_RETRIEVED_ACTION)

3-
اون لامبدا فانکشنی که تعریف کرده بودیم رو اینجا استفاده میکنیم
        smsReceiver.onReceiveMessage {
            Log.e("SMSLogs", "SMS : $hashCode")
        }

این شکلی میشه نهایتا
    private fun initBroadCast(){
        intentFilter = IntentFilter(SmsRetriever.SMS_RETRIEVED_ACTION)
        smsReceiver.onReceiveMessage {
            Log.e("SMSLogs", "SMS : $hashCode")
        }
    }

4-
استارت زدن دریافت اس ام اس ها
    private fun smsReceiver(){
        val client = SmsRetriever.getClient(this)
        client.startSmsRetriever()
    }

5-
تا به اینجای کار گوش به زنگی کلاس SmsRetriever رو فعال کردیم
هنوز برادکست رسیوره رو فعال نکردیم
برای این منظور

دقت کنید هر زمان میخواید از برادکست رسیور ها استفاده کنید باید استارت و استاپش کنید
اگر استاپش نکنید و همینجوری باز بمونه
خب شما یک بار کد رو دریافت کردید رفت دیگه
بعد فرض کنید تو طول زمانی که کاربر شما داره با اپلیکیشن کار میکنه هی اس ام اس میاد
این بدبخت همچنان اون پشت داره کار میکنه
در حالی که یک بار زحمتشو کشیده و رفته
دستش درد نکنه
چرا باید گوش به زنگ بمونه
چون مموری اپ شما رو داره مصرف میکنه با این کار و منابع رو مصرف میکنه
اندروید میندازدتون بیرون بالاخره
پس حتماااا باید کنسل کنید
همین ریزه کاریا خیلی مهمه
اکه استارتش هم نزنید که کلا اس ام اسی دریافت نمیکنه حتی وقتی هش کد شما درسته

برای این منظور برادکست رسیورها دو تا فانکشن رجیستر و آن رجیستر رو دارن

دو تا متغیر میگیره از ما برای رجسیتر کردن
اولی یک برادکست رسیور
دومی یک اینتنت فیلتر
    override fun onResume() {
        super.onResume()
        registerReceiver(smsBroadcastReceiver , intentFilter)
    }

این هم برای آن رجیستر کردن هس
    override fun onStop() {
        super.onStop()
        unregisterReceiver(smsBroadcastReceiver)
    }

6-
برای تست ارسال اس ام اس برید توی امولیتور اندروید استدیو توی قسمت phone
میتونید اس ام اس تستی بفرستید با متن دلخواه

----------------------------------------------------------------------------------------------کدنهایی

    @Inject
    lateinit var signatureHelper: AppSignatureHelper

    @Inject
    lateinit var smsBroadcastReceiver : SMSBroadcastReceiver

    //other
    var hashCode : String = ""
    private var intentFilter : IntentFilter? = null


    @Suppress("DEPRECATION")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        _binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        //Generate Hashcode
        signatureHelper.appSignatures.forEach { value : String ->
            hashCode = value
            Log.e("HashcodeLogs", "Hashcode : $hashCode")
        }

    }

    private fun initBroadCast(){
        intentFilter = IntentFilter(SmsRetriever.SMS_RETRIEVED_ACTION)
        smsBroadcastReceiver.onReceiveMessage {
            Log.e("SMSLogs", "SMS : $hashCode")
        }
    }

    private fun smsReceiver(){
        val client = SmsRetriever.getClient(this)
        client.startSmsRetriever()
    }

    override fun onResume() {
        super.onResume()
        registerReceiver(smsBroadcastReceiver , intentFilter)
    }

    override fun onStop() {
        super.onStop()
        unregisterReceiver(smsBroadcastReceiver)
    }

