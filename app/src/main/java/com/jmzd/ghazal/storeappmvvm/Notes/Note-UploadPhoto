برای بارگذاری عکس پروفایل
https://shop.nouri-api.ir/api/v1/auth/avatar

دقت کنید که ۹۹٪ سرویس های مربوط به آپلود عکس از نوع پست هستن
اگه نبود به بک اند دولوپرتون شک کنید
مگر اینکه بخواد با base64 ببره جلو که به قدری استرینگ طولانی میشه که زیاد جالب نیست
پوت و پست مثل هم هستن. پوت برای آپدیت هست
پوت میاد override میکنه وقتی از قبل دیتایی باشه

ریسپانسی که از این api دریافت میشه به شکل زیر هست

"https://shop.nouri-api.ir/avatar/174.jpg?170324719890"

میبینید که برعکس سرویس هایی که تا الان داشتیم بدنه جیسون نداره

روش های آپلود عکس:----------------------------------------------------------------------------------
1- base 64
میاد چیکار میکنه؟
یک عکس رو به یک استرینگ خیلی بزرگ تبدیل میکنه
در حد چند صفحه
و هرچقدر حجم عکس بزرگتر باشه استرینگ بزرگتر میشه
خیلی سنگین میشه
و توی بادی هم میفرستیم این استرینگه رو
در کل روش خیلی ایده آلی نیست و روش بهتری داره

2- multipart form
اکثر اپلیکیشن های درست حسابی از این روش استفاده میکنن
فرض کنید یک عکس دارید ۵ مگابایته
هیچ موقع ما نمیایم یهو ۵۰۰ کیلو یک مگ اینا رو یه باره آپلود کنیم
آپلود سرعتش نسبت به دانلود خیلی کمه

فرض کنید یک جعبه میوه دارید که صد کیلوعه
نماید یه باره کلشو بلند کنید که
۱۰ کیلو ۱۰ کیلو برمیدارید و جا به جاش میکنید

مولتی پارت میاد چیکار میکنه؟
اینو تقسیم میکنه به پارت های خیلی خیلی کوچیک
در حد ۵۰ کیلو بایت و ۱۰۰ کیلو بایت
اینا رو میفرسته
در نهایت این تبدیل میشه به یک فایل ۱۰ مگابایتی

بعد اینم در نظر بگیرید
که حتی اگه عکس رو به صورت استرینگ بیس ۶۴ بفرستید
با ویدیو میخواید چیکار کنید؟
واسه همین مولتی پارت فرم خیلی خیلی کاراتر هست

این روشی که ما اینجا میگیم فقط مختص عکس نیست
و برای فرستادن فایل به صورت مالتی پارت هست
فایل میتونه پی دی اف یا موزیک یا ویدیو یا عکس یا هر چیزی باشه

model-----------------------------------------------------------------------------------------------
از اونجایی که ما جیسونی توی ریسپانس نداریم پس مدلی هم نداریم
یک استرینگ خالی است

api services----------------------------------------------------------------------------------------
ما قبلا بادی که میفرستادیم به صورت مدل میفرستادیم
الان میخوایم یاد بگیریم چیجوری بادی رو به صورت داینامیک بفرستیم
یعنی از قبل مشخص نباشه مدل
برا وقتایی کاربرد داره که چندین نوع بادی برای یک سرویس مشخص داریم
مثلا پارامترها را تحت شرایطی باید بفرستیم یا نباید بفرستیم
میشه یک مدل خیلی بزرگ ساخت در این مواقع برای هندل کردن همه حالت ها
ولی کد کثیف میشه
این روش داینامیک فرستادن بادی خیلی روش بهتریه
هر چیزی رو که اد کنی بهش برات میفرسته در این حالت

میایم تایپ بادی رو به جای مدل خاص از نوع ریکوعست بادی میذاریم
حواستون باشا اشتباهی تایپ رو ریسپانس بادی نذارید ها
ریکوعست بادی بعنی اون چیزی که دارم میفرستم
ریسپانس بادی اون چیزیه که برام میاد
ok http 3 هم هستن از کتابخونه

ریسپانس رو هم از نوع unit در نظر میگیریم
که معادل همون void هست در جاوا
یعنی هیچی

در نهایت به این شکل میشه
    @POST("auth/avatar")
    suspend fun uploadAvatar(@Body body : RequestBody) : Response<Unit>

این ریکوعست بادی رو خیلی جدی بگیرید چیز خیلی خفنیه
برای هندل کردن وضعیت های پیچیده خیلی به تمیز موندن کد کمک میکنه


شاید توی استک اور فلو و این ها دیده باشید که
میان مالتی پارت رو به صورت انوتیشن بالای انوتیشن پست مشخص میکنن
    @Multipart
    @POST("auth/avatar")
    suspend fun uploadAvatar(@Body body : RequestBody) : Response<Unit>
این هم درسته ولی ما نمیخوایم به صورت بالا مشخصش کنیم
چون میخوایم داینامیک بفرستیم
و مالتی پارت بودنش رو هم میخوایم به صورت داینامیک بفرستیم

این انوتیشن مالتی پارت رو اگه برای متد گت قرار بدی برات ارور نشون میده

ما حتی این انوتیشن رو هم به صورت داینامیک براش میفرستیم

ولی حتما باید مشخص کنیم براش. حالا استاتیک یا داینامیک

Image picker library--------------------------------------------------------------------------------
ما از این کتابخانه برای پیکر عکس استفاده میکنیم
https://github.com/SimformSolutionsPvtLtd/SSImagePicker

توی پروژه های زیادی ازش استفاده شده و خیلی راضی هستن
مخصوصا برای اندرویدهای بالاتر

چون همون طور که میدونید
توی اندروید ۱۰ دسترسی های استوریج تغییراتی داشته
توی ۱۱ یه خورده سخت ترش کرد
توی ۱۲ و ۱۳ دیگه زد واقعا سخت ترش کرد
که باید بیاید به کمک اسکوپ ها به استوریج دسترسی پیدا کنید
این لایبرری کامل همه این ها رو ساپورت میکنه
کلی فیچر خفن هم داره
روتیت - زوم - کراپ ...
مثلا دایره ای کراپ کردن
خیلی زحمت کشیدن براش

برای استفاده از این کتابخونه باید دیتابایندینگ پروژه تونم ترو کنید

نحوه استفاده:
1- activate data binding

2- add activity tag to manifest
باید بیاید اکتیویتی مربوط به این کتابخونه رو توی مانیفست اضافه کنید
با استفاده از کاستومایزی که توی داکیومنتش توضیح داده
میتونید مثلا رنگ ها و تم و ... رو عوض کنید توی پیکر

3- add listeners
برای استفاده از این پیکر باید بیاید لیسنرهاشو به فرگمنت با اکتیویتیون اضافه کنید
چی رو بهمون میده این لیسنر؟
عکسی که انتخاب کردیم
اگه نخوایم از این کتابخونه استفاده کنیم
این عکس رو در قالب onActivityResult بهمون برمیگردونه
که الانم onActivityResult دپریکیت شده
و یک روش دیگه ای اومده ولی سازوکار تقریبا همونه
ما دیگه از اون روش استفاده نمیکنیم چون کتابخونه همه شو هندل کرده
و مسیر عکس رو خیلی راحت به ما برمیگردونه

به شکل زیر میشه
@AndroidEntryPoint
class ProfileFragment : BaseFragment() , ImagePickerResultListener {

و متدهای زیر رو هم اورراید میکنه
    override fun onImagePick(uri: Uri?) {


    }

    override fun onMultiImagePick(uris: List<Uri>?) {
    }

یکیش برا وقتی یک عکس رو پیک میکنه یکیش برا وقتی چند تا عکس داریم
و خب داره uri هم برمیگردونه که چیزیه که نیاز داریم



