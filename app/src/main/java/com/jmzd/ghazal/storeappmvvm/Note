Android studio short cuts---------------------------------------------------------------------------
Ctrl + ALT + O = remove unnecessary imports (optimize imports)

Ctrl + alt + +/- = open/close a specific block of code
Ctrl + shift + +/- = open/close all blocks of code in a page

Dependencies----------------------------------------------------------------------------------------
Data Binding:
خودمون استفاده ای ازش نداریم ولی یکی از کتتابخانه هایی که اد کردیم نیازش داره

Coli & Glide:
بین کتابخانه های لود عکس در اندروید بهترین پرفورمنس مال گلاید هست
مزیت کویل اینه که صد در صد کاتلینیه و با کروتین ها خیلی مچه
کوبل با کروتین ساخته شده کاملا ولی گلاید سازوکار خاص خودشو داره
و زمانی که گلاید عرضه شد خطای out of memory رو تا ۸۰ درصد کاهش داد
مثل رتروفیت یک کتابخونه انقلابی بود

PinView:
برای وارد کردن اعداد کد تایید و...

MP Android Chart:
بزرگترین کتابخونه رسم نمودار برای اندروید هست
تقریبا هر مدل نموداری بخوایم داره
حتی نمودارهای کاستوم میتونید بسازید
بلا استثنا تمام پروژه های بزرگ از این کتابخانه استفاده میکنن

Application class-----------------------------------------------------------------------------------
برای معرفی هیلت و کالی گرافی
(res -> RClick -> new folder -> assetFolder -> insert font here)

Data Store-------------------------------------------------------------------------------------------
میتونیم کلاس مربوط به دیتا استور رو توی پکیج یوتیلز یا دیتا قرار بدیم و هر دو درسته کاملا
ما میایم میذاریم توی دیتا چون میگیم کار با دیتاست دیگه
براش هم یک پکیج می سازیم به اسم stored

ما از لفظ سشن برای کارهای مربوط به توکن و واحراز هویت استفاده میکنیم
سشن چیه؟
توی هر پلتفرمی که باشید یک فضایی برای شما در نظر میگیرند
که شما توی اون فضا می تونید وجود داشته باشید
اطلاعاتت رو دارن و میدونن شما چه شخصی هستید
پلتفرم ها میان برای این سشن ها یک اکسپایر تایم یا زمان منقضی شدن در نظر میگیرن
مثلا دو ساعت - دو هفته - دو ماه
هر از گاهی میندازمت بیرون دوباره لاگین کن
که این یک چیز کاملا عرفیه

دیتا استور یک دیتابیس مانندیه که میاد توی یک فایلی از جنس xml ذخیره میکنه دیتای ما رو

    companion object{
        /* دقت کنید روی کلاس کانتکس تعریف کنید نه آبجکت کانتکس */
        /* این خط کد میاد میاد خود فایل اون چیزی که داره درست میشه رو برامون درست میکنه
        * شبیه اسم دیتابیس توی روم */
        private val Context.dataStore : DataStore<Preferences> by  preferencesDataStore(SESSION_AUTH_DATA)
        /* این خط کد میاد دیتای داخل اون فایل رو برامون ذخیره میکنه
        * شبیه اسم تیبل توی روم */
        private val tokenKey = stringPreferencesKey(USER_TOKEN_DATA)
    }

این نکته رم دقت کنید:
زمانی که از دیتااستور استفاده می کنید
دیتا استور به ازای هر یک از کلیدها باید یک بار ساخته شود
اکه توی کامپنین ابجکت قرار ندید مدام میخواد بسازه
و با ارور رو به رو میشید
پس یا باید به صورت سینگل تون بسازید یا کامپنین آبجکت باشه حتما

برای دریافت توکن از کد زیر استفاده میکنیم
    val getToken : Flow<String?> = appContext.dataStore.data.map { data: Preferences ->
        data.toString()
    }
میخوام به صورت فلویی از استرینگ باشه که بتونم کالکتش کنم
ولی وقتی میزنیم دیتا استور دات دیتا یک فلویی از پرفرنسیز میده بمون
خب پس مپ میزنیم که بتونیم تبدیل کنیم

-----------------------------------------------
برای استفاده از مقادیر ذخیره شده در دیتا استور در فرگمنت (اسپلش)
بعد از تزریق وابستگی های لازم:
میتونیم از کالکت استفاده کنیم
                val token = sessionManager.getToken.collect{ value : String? ->
                    value
                }
یا نه یک روش بهتر میتونیم از فرست استفاده کنیم:
مزیتش چیه؟
میگه زمانی که اون چیزی که تو میخوای رو در اختیارت قرار داد
بلافاصله اون کالکشن رو میاد کنسل میکنه
ما صرفا تو اسپلش میخوایم چک کنیم همچین محتوایی موجوده با نه
نمیخوایم گوش به زنگ تغییرات باشیم که

                val token : String? = sessionManager.getToken.first()


این روش مدیریت کردن سشن (یعنی با یک کلاس جداگانه) یکی از بهترین روش های مدیریت سشن هست که تا حالا توی این دوره انجام دادیم

Navigation------------------------------------------------------------------------------------------
res -> RClick -> new android resource directory -> navigation

توی این پروژه یاد میگیریم که چطور نویگیشن های تو در تو استفاده کنیم

Lottie----------------------------------------------------------------------------------------------
res -> RClick -> new android resource directory -> raw -> insert your animation here

then use it like this :

    <com.airbnb.lottie.LottieAnimationView
        android:id="@+id/animationView"
        android:layout_width="match_parent"
        android:layout_height="@dimen/_180mdp"
        android:layout_marginTop="@dimen/_10mdp"
        app:lottie_autoPlay="true"
        app:lottie_loop="false"
        app:layout_constraintTop_toBottomOf="@id/infoTxt"
        app:lottie_rawRes="@raw/lottie_phone" />

SMS & HashCode--------------------------------------------------------------------------------------
خب برای اوتو فیل شدن اس ام اس ها یک هش کد نیاز داریم
هش کد یک کد یوتنیک هست
ما توسط این کد متوجه می شیم که ای اس ام اس برای اپلیکیشن ما اومده
ما این هش کد رو باید کاملا اختصاصی برای اپلیکیشن خودمون درست کنیم  و بفرستیم سمت سرور
وقتی شماره موبایل رو وارد مکینیم این هش کد رو هم میفرستیم برای سرور
توی اس ام اسی که برای ما فرستاده میشه بک این هش کد ته اس ام اس فرستاده میشه
هش کد کاملا یونیک و از ۸ تا ۱۲ کاراکتر هست
جلوتر توسط برادکست رسیورها این اس ام اس ها رو میخونیم
و میبینیم آیا انتهاش یک هش کد مانندی داره
و اگه داره همون هش کدیه که من میخوام یا نه
اگه همونی که دنبالش هستیم باشه متن اس ام اس رو توسط برادکست رسیور میگیریم و کدی که میخوایم رو دستی از توش در میاریم
اگه ایمیل باشه نیازی به هش کد نیست چون اوتو فیل نداریم

-------------------------------------------پیاده سازی فایربیس (کنسول)
برای پیاده سازی این سازوکار باید از سرویس های گوگل استفاده کنیم
این هش کدها توسط یک سری الگوریتم های خیلی پیچیده و خاص توسط خود گوگل تولید میشن

1- add dependencies to gradle
    //Receive OTP
    implementation 'com.google.android.gms:play-services-base:18.2.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:18.0.1'

2- add this plugin to gradle
plugins {
    id 'com.google.gms.google-services'
}

3- add this line of code to build.gradle (module level)
plugins {
    id 'com.google.gms.google-services' version '4.3.14' apply false
}

4- sync project
چون سرویس های خود گوگل هستن باید وی پی ان خوبی برای دور زدن تحریم هاش داشته باشید

5- error: file google-services.json is missing
چون زمانی که میخوااید از پلی سرویس ها استفاده کنید باید اپلیکیشنتون رو توی فایربیس معرفی کنید
بعد معرفی اون یک فایل جیسون میده به ما
که نشون میده اپلیکیشن ما توی fcm یا فایربیس ثبت شده
و ما بتونیم استفاده کنیم
تحریم های فایربیس یکی از شدید ترین تحریم هاست

6- open firebase console
https://console.firebase.google.com/u/0/?pli=1
create project -> choose a delkhah name -> create project
or -> go to console (to visit your previous projects)
https://console.firebase.google.com/u/0/project/storeapp-ed947/overview

7- now choose a platform (circular icons)(ios | android | flutter | unity |...)
-> android ->
package name : gradle -> application id -> com.jmzd.ghazal.storeappmvvm
nickname (optional) : delkhah name -> StoreAndroidApp
SHA1 debug (optional) : nazdim felan
-> register app

8- download json
project view -> app -> paste json file here

9-
پیشنهاد میده یک سری دپندنسی ها رو اضافه کنیم که ما قبلا کردیم
-> next

--------------------------------------------- تولید هش کد
برای ساخت هش کد گوگل خودش الگوریتمش رو قرار داده
همون رو باید کپی کنیم توی پروژه و استفاده کنیم
فقط این الگوریتم قبلا به صورت جاوا بود
و نسخه جدیدش که کاتلین شده کلا فرق کرده و با یک روش دیگه رفتن جلو
ما از همون نسخه جاوایی الگوریتم استفاده میکنیم و خودمون تبدیل میکنیم به کاتلین
چرا از الگوریتم قدیمی استفاده میکنیم؟
چون توی ورژن جدید الگوریتم فقط روی اندروید های بالاتر کار میکنه

برای خوندن هش کد نیاز به دو تا کلاس داریم
کلاس اولی که کد رو برای ما جنریت میکنه
دومی یک کلاس برادکست رسیور هست که اطلاعات اس ام اس رو بخونه

کلاس های مربوط به این بخش رو توی utils و otp قرار میدیم
BroadCastReceiver-----------------------------------------------------------------------------------
تا الان دیدید که ما از ابزرورها استفاده میکردیم که هر تغییری توی اپلیکیشنمون رخ میده اطلاع داشته باشیم
ولی بعضی وقتا پیش میاد که بعضی از این تغییرات داخل اپلیکیشن ما نیست
اس ام اس مثلا - یا تماس - باتری
من میتونم روی این عوامل خارجی یک سری دسترسی هایی داشته باشم و بخونمشون
برای این کار از برادکست رسیورها و سرویس ها استفاده میکنیم
قبل تر ها که لایودیتا و آرایکس نبود برای یک سری ایونت های داخل اپلیکیشن هم از برادکست ها استفاده میشد
ایونت باس بعدا اومد که اونم خیلی خوبه

خب پس به طور کلی برادکست رسیور چیزیه که ما رو از تغییرات خارجی مطلع میکنه

----------------------------------------پیاده سازی
1- create a class that extends : BroadcastReceiver()

2- implement methods : onReceive

3- SmsRetriever
برای گوش دادن به اس ام اس ها از یک کلاسی استفاده میکنیم به اسم SmsRetriever
این مال خود اندروید است
مال یکی از همون دو تا دپندسی هاس که اضافه کردیم
implementation 'com.google.android.gms:play-services-auth-api-phone:18.0.1'

#intent ?
اینتنت یک حالتیه که ما توسط اون میتونیم
 با صفحات مختلف اپلیکیشن خودمون
  یا با صفحات مختلف اپلیکیشن های دیگه
  یا با بخش های اپلیکیشن های دیگه میتونیم ارتباط برقرار کنیم

چک میکنیم اگر اون اکشنی که از اینت اومده اکشن دریافت اس ام اس هست...
        if (SmsRetriever.SMS_RETRIEVED_ACTION == intent.action) {

اطلاعاتی که اینتنت حمل میکنه در قالب extras هست
            val extras = intent.extras

یک استاتوس هم هست مثل وقتی با api ها کار میکنیم
بفهیمیم ساکسسه اروره چیه
            val status = extras?.get(SmsRetriever.EXTRA_STATUS) as Status

بعد میایم میگیم اگه استاتوس ساکسس بود بیا مسیج رو از توش در بیار
و کد رو میخوایم از توش در بیاریم و استفاده کنیم
            when (status.statusCode) {
                CommonStatusCodes.SUCCESS -> {
                // write your code here
                }
            }

روش های مختلفی برای فرستادن اطلاعات به صفحات مختلف وجود داره
مثل اینترفیس ها و...
ما اینجا از یکی از بهترین روش ها استفاده میکنیم
یعنی توسط لامبدا فانکشن ها
    private var receiveMessage: ((String) -> Unit)? = null
    fun onReceiveMessage(listener: (String) -> Unit) {
        receiveMessage = listener
            }

 //inside success block
   val message = extras.get((SmsRetriever.EXTRA_SMS_MESSAGE)) as String
                     receiveMessage?.let {
                         it(message) }


نکته : دقت کنید که این کلاس همه اس ام اس ها رو نمیخونه
فقط اونایی رو میخونه که هش کدش همون هش کد خودمونه
یعنی اصلا با اس ام اس های متفرقه دسترسی نداره
پس حالت ساکسسش فقط وقتیه که
1- هش کد داشته باشه اون اس ام اس
2- هش کدش با هش کد ما یکی باشه