Dependencies----------------------------------------------------------------------------------------
Data Binding:
خودمون استفاده ای ازش نداریم ولی یکی از کتتابخانه هایی که اد کردیم نیازش داره

Coli & Glide:
بین کتابخانه های لود عکس در اندروید بهترین پرفورمنس مال گلاید هست
مزیت کویل اینه که صد در صد کاتلینیه و با کروتین ها خیلی مچه
کوبل با کروتین ساخته شده کاملا ولی گلاید سازوکار خاص خودشو داره
و زمانی که گلاید عرضه شد خطای out of memory رو تا ۸۰ درصد کاهش داد
مثل رتروفیت یک کتابخونه انقلابی بود

PinView:
برای وارد کردن اعداد کد تایید و...

MP Android Chart:
بزرگترین کتابخونه رسم نمودار برای اندروید هست
تقریبا هر مدل نموداری بخوایم داره
حتی نمودارهای کاستوم میتونید بسازید
بلا استثنا تمام پروژه های بزرگ از این کتابخانه استفاده میکنن

Application class-----------------------------------------------------------------------------------
برای معرفی هیلت و کالی گرافی
(res -> RClick -> new folder -> assetFolder -> insert font here)

Data Store-------------------------------------------------------------------------------------------
میتونیم کلاس مربوط به دیتا استور رو توی پکیج یوتیلز یا دیتا قرار بدیم و هر دو درسته کاملا
ما میایم میذاریم توی دیتا چون میگیم کار با دیتاست دیگه
براش هم یک پکیج می سازیم به اسم stored

ما از لفظ سشن برای کارهای مربوط به توکن و واحراز هویت استفاده میکنیم
سشن چیه؟
توی هر پلتفرمی که باشید یک فضایی برای شما در نظر میگیرند
که شما توی اون فضا می تونید وجود داشته باشید
اطلاعاتت رو دارن و میدونن شما چه شخصی هستید
پلتفرم ها میان برای این سشن ها یک اکسپایر تایم یا زمان منقضی شدن در نظر میگیرن
مثلا دو ساعت - دو هفته - دو ماه
هر از گاهی میندازمت بیرون دوباره لاگین کن
که این یک چیز کاملا عرفیه

دیتا استور یک دیتابیس مانندیه که میاد توی یک فایلی از جنس xml ذخیره میکنه دیتای ما رو

    companion object{
        /* دقت کنید روی کلاس کانتکس تعریف کنید نه آبجکت کانتکس */
        /* این خط کد میاد میاد خود فایل اون چیزی که داره درست میشه رو برامون درست میکنه
        * شبیه اسم دیتابیس توی روم */
        private val Context.dataStore : DataStore<Preferences> by  preferencesDataStore(SESSION_AUTH_DATA)
        /* این خط کد میاد دیتای داخل اون فایل رو برامون ذخیره میکنه
        * شبیه اسم تیبل توی روم */
        private val tokenKey = stringPreferencesKey(USER_TOKEN_DATA)
    }

این نکته رم دقت کنید:
زمانی که از دیتااستور استفاده می کنید
دیتا استور به ازای هر یک از کلیدها باید یک بار ساخته شود
اکه توی کامپنین ابجکت قرار ندید مدام میخواد بسازه
و با ارور رو به رو میشید
پس یا باید به صورت سینگل تون بسازید یا کامپنین آبجکت باشه حتما

برای دریافت توکن از کد زیر استفاده میکنیم
    val getToken : Flow<String?> = appContext.dataStore.data.map { data: Preferences ->
        data.toString()
    }
میخوام به صورت فلویی از استرینگ باشه که بتونم کالکتش کنم
ولی وقتی میزنیم دیتا استور دات دیتا یک فلویی از پرفرنسیز میده بمون
خب پس مپ میزنیم که بتونیم تبدیل کنیم

-----------------------------------------------
برای استفاده از مقادیر ذخیره شده در دیتا استور در فرگمنت (اسپلش)
بعد از تزریق وابستگی های لازم:
میتونیم از کالکت استفاده کنیم
                val token = sessionManager.getToken.collect{ value : String? ->
                    value
                }
یا نه یک روش بهتر میتونیم از فرست استفاده کنیم:
مزیتش چیه؟
میگه زمانی که اون چیزی که تو میخوای رو در اختیارت قرار داد
بلافاصله اون کالکشن رو میاد کنسل میکنه
ما صرفا تو اسپلش میخوایم چک کنیم همچین محتوایی موجوده با نه
نمیخوایم گوش به زنگ تغییرات باشیم که

                val token : String? = sessionManager.getToken.first()


این روش مدیریت کردن سشن (یعنی با یک کلاس جداگانه) یکی از بهترین روش های مدیریت سشن هست که تا حالا توی این دوره انجام دادیم
