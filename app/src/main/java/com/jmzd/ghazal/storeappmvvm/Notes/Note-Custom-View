
CustomView------------------------------------------------------------------------------------------
میخوایم برای دکمه هامون یک حالت کاستوم برای لودینگ ایجاد کنیم
البته کاستوم ویو نمی نویسیم
میایم یک اکسستنشن فانکشن برای لودینگش مینویسیم
اینم یک راهشه دیگه...

private fun drawableProgress(context: Context): Drawable? {
اولین کاری که میکنیم یک فانکشنی می نویسیم که بیاد یک ویو درست کنه
زمانی که شما دارید روی ویوها کار میکنید اکثر مواقع یعنی ۸۰٪ به بالا به کانتکست نیاز دارید
بعد میخوایم تبدیلیشش کنیم به Drawable
چرا Drawable؟
چون ما هر چیزی که به عنوان یک shape یا آیکون بخوایم اضافه کنیم باید از Drawable استفاده کنیم
متریال باتن هم در قالب آیکون میگیره این چیزا رو


val value = TypedValue()
اولین چیزی که نیاز داریم یک ولیو هست از نوع TypedValue
تایپد ولیو در واقع میاد اون چیزای مختلفی که روی کاستوم ویو من میخوام اعمال کنم رو
 توسط این میام هندلشون میکنم جلوتر
 مثلا از دیتاش بعدا استفاده میکنیم که دیتای خود پروگرس بار رو متوجه شیم


context.theme.resolveAttribute(android.R.attr.progressBarStyleSmall, value, false)
context.theme :
دسترسی به تم
[در واقع دسترسی به اترییبیوت های xml پیدا میکردم با این کد وقتی خودم کاستوم ویو مینوشتم. توی فایل attrs ...]
اینجا به تم خود اندروید اشاره میکنه
{ تایپ ولیو ها هم تا جایی که یادمه اون نوع اتریبیوت بودن. مثلا Drawable باشه یا بولین یا چی؟}
resolveAttribute :
میگه اون تمت رو به من بده
تمی که میخوای اعمال کنی رو هر ویویی که مد نظرته
progressBarStyleSmall :
اندروید برای پروگرس بار استایل های مختلفی رو در نظر گرفته که ما از این یکی میخوایم استفاده کنیم


val progressStyle = value.data
دیتای داخل اون ولیو رو میگیریم


val attrs = intArrayOf(android.R.attr.indeterminateDrawable)
اون ارتریبیوت خاص رو میگیریم


    val typeArray: TypedArray = context.obtainStyledAttributes(progressStyle, attrs)
    val drawable = typeArray.getDrawable(0)
    خلاصه میسازیمش


    typeArray.recycle()
زمانی که شما کاستوم ویو درست میکنید این کاستوم ویو از ولیو ارث بری کرده
از هر چیزی میتونه ارث بری کنه. مثلا کانسترینت لایوت - ایمیجج ویو - تکست ویو...
این تکست ویو توی اندروید وجود داره ولی من اومدم یک تکست ویو مخصوص به خودم رو درست کردم
چطور اینو میسازه؟
با ریسایکل
یعنی اون چیزو با اون حالت پیش فرضش پاک میکنه و با این حالت جدیدش میسازه
به این کار میگن ریسایکل کردن
اگه اینو ننویسیم با همون قبلیه و پیش فرضش میره جلو


    return drawable
آخر کارم اینو ریترن میکنیم

---------------------------------------------

fun MaterialButton.enableLoading(loading: Boolean) {

    maxLines = 1
چون ممکنه متن طولانی باشه و وقتی لودینگ نمایش داده میشه چند خطی شه که جالب نیست
فقط لودینگ که هست یک خطی شو بعد برگرد به حالت قبل


    iconGravity = MaterialButton.ICON_GRAVITY_END
اینم که مشخصه

    setIconTintResource(R.color.white)
اینم که رنگش

    if (loading) {
حالا اگه لودینگ بود چیکار کن؟

        var drawable = icon
اول از همه نیاز به یک Drawable داریم که باید بسازیمش
از کجا initialize شه این Drawable؟
از اتریببیوت آیکون متریال باتن


        if (drawable !is Animatable) {
            drawable = drawableProgress(context)
            icon = drawable
        }
میگیم اگه Drawableی که داخل آیکون هست از نوع Animatable نبود
بیا از اون متدی که نوشتیم بسازش
کانتکس از کجا آوردیم؟
چون وقتی داریم روی ویو کار میکنیم خیلی راحت به کانتکسش هم دسترسی داریم
اترییوت آیکون رو میایم این آیکونی که باید نشون بدیم رو میریزیم توش


        (drawable as Animatable).start()
استارتش رو میزنیم شروع کنه چرخیدن


        alpha = 0.5f
الفا رو هم کم کن که کاربر بفهمه دیس ایبل شده

    } else {
        icon = null
        alpha = 1.0f
    }
در غیر این صورت
یعنی لودینگ تمام شد
آیکون رو نال کن که دیگه نشون نده
آلفا رو هم برگردون به حالت اولیه

}