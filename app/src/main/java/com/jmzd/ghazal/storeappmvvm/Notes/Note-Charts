کتابخونه ای که برای چارت های این پروژه استفاده میکنیم
 کتابخونه بی نهایت قویه و حالت های مختلفی داره
 ما از حالت لایند یا خطی استفاده میکنیم
 ولی هر نموداری که دلتون بخواد توی این کتابخونه وجود داره
 دایره ای - شکل های عجیب غریب...
 تقریبا از نظر امتیازی تو رده کتابخونه رتروفیت هست
 و خب چون کتابخونه خیلی گسترده ایه یادگیری کاملش هم زمان بره
 خیلی هم میتونی روی نموداراش کاستومایز انجام بدی
 گرادیانت بدی و ...
 خیلی دستتون رو باز میذاره توی کاستومایز نمودارها
 ما کلا برای کار با نمودار اکستنشن می نویسیم

 ---------------------------------------------------------------------------------------------------

 برای اینکه بتونیم از یک سری موارد این نمودار استفاده کنیم یک سری ورودی نیاز داریم

formatter:
کتایخونه ام پی چارت یک حالتی ازتون میگیره به اسم فرمتر
میگی مثلا این اطلاعاتی که من دارم را با توجه به چه چیزی در نظر بگیر و فرمت کن
فرمتر پیش فرضش یک سری چیزای انگلیسی هست
و ما چون اپمون فارسیه بهتره از فرمتر مخصوص به خودمون استفاده کنیم
یعنی یک فرمت مخصوص به خودمون رو بنویسیم که کاملا با فارسی سینکه
علاوه بر اون تاریخ و اینا که میخوایم نشون بدیم رو با توجه به اون فرمت خودمون به کاربر نشون بدیم
دیتاتایپش مال خود کتابخونه هست

entry:
به یک لیستی نیاز داره
اون لیست دیتای ما هست که قراره نشون بدیم
و دیتاتایپ انتری مال خود کتابخونه هست
کلا اطلاعات رو در حالت x و y میگیره
مثل کی ولیو
و میتونه چیزای بیشتری مثل آیکون هم داشته باشه

count:
چون نمودار یک اسکیل پیش فرضی داره که ممکنه با توجه به حجم داده ما بد شکل شه یکم
پس ما بهش میگیم چقدر کش بیاد و...
آپشناله

list:


 fun LineChart.setupMyChart(formatter: IndexAxisValueFormatter, entry: ArrayList<Entry>, count: Int, list: MutableList<String>) {

 از اسکوپ فانکشن ویت استفاده میکنیم که لازم نباشه هی کلمه دیس را برای دسترسی به لاین چارت تکرار کنیم
     with(this) {
         //General

         به اون راهنمای کوچیک زیر نمودار که فلان رنگ مال فلان پارامتره میگن لجند توی این لایبرری
         یک مستطیل رنگی و کنارش اسم اون پارامتر
         ما خب نمیخوایم اینو فعلا
         روی لجند که دات بزنید که کاستومایزهایی که میتونید روش انجام بدین رو میبینید
         از زاویه نشون دادنش بگیر تا چیزای دیگه
         legend.isEnabled = false


         قایلیت تاچ داشته باشه یا نه
         setTouchEnabled(true)

         نمیخوایم درگ داشته باشه
         اکثرا برا وقتاییه که تعداد آیتم ها زیاده و کاربر میتونه چپ و راستش کنه
         isDragEnabled = false

         اسکیل هم نمیخوایم داشته باشه و همون چیزی که ست میکنیم رو نشون بده
         setScaleEnabled(false)

         زوم این و زوم اوت نمیخوایم داشته باشه
         زیاد جزییات نداره نمودارمون
         setPinchZoom(false)

         انیمیشن روی محور ایکس داشته باشه
         بهش میگیم مقادیری که روی محور ایکس میگیری رو با چه دیلی ای انیمیشنش رو ست کن
         animateX(1000)

         توضیحات نمیخوایم داشته باشه
         description.isEnabled = false

         محور سمت راست نمیخوایم
         پس کاربر از کجا بفهمه مثلا اعداد این محور رو؟
         ما حالت تاچ رو اینیبل کردیم براش
         کاربر تاچ که میکنه یک نقطه حالت تولتیپ باز شه و اطلاعات رو نشون بده
         axisRight.isEnabled = false

        میخوایم یک فاصله ای از چپ و راست بندازیم که نچسبه به صفحه
        حالا چطور از مقادیر کتابخونه نوری دایمنشن توی کد استفاده کنیم؟
        برای دسترسی به این مقادیر باید به ریسورس دسترسی داشته باشیم
        برای دسترسی به ریسورس هم باید به کانتکس دسترسی داشته باشیم
        توی گت دایمنشن یک دایمنشن میخواد که باید بهش بدیم
        پکیج نیم کتابخونه رو مینویسیم
        بعد به پوشه آر و دایمنیشن کتابخونه دسترسی پیدا میکنیم
        و مقدادیر رو میاریم
        البته توی فرگمنت و اکتیویتی که هستیم لازم نیست کانتکس رو بنویسیم
        توی کلاس های جانبی مثل اینجا لازمه
        و دقت کنید لازم نیست کانتکس رو پاس بدین
        چون روی ویو اکستنشن زدیم و ویوها خودشون کانتکس دارن
         extraRightOffset = context.resources.getDimension(`in`.nouri.dynamicsizeslib.R.dimen._8mdp)
         extraRightOffset = context.resources.getDimension(`in`.nouri.dynamicsizeslib.R.dimen._8mdp)

         کاستومایز محور سمت چپ
         خیلی دستمون بازه توی کاستومایز
         از رنگ و ضخامت تا تایپ فیس و فونت
         //Left
         axisLeft.apply {

            لیبل ها رو نمیخوایم بمون نشون بده
            لیبل چیه؟
            اعداد روی محور
            اگه خواستین لیبل رو نشون بدین چون از فونت پیش فرض اندروید استفاده میکنه
            حتما تایپ فیس رو ست کنید روش
             setDrawLabels(false)

             خط افقی رو نمودار داشته باشیم؟ بله
             setDrawGridLines(true)

             خط ها چه رنگی باشه؟
             gridColor = ContextCompat.getColor(context, R.color.lavender)

             اینم نمودار نمیدونم چیه که نشون نده
             setDrawAxisLine(false)

             از چه عددی میننیموم ساخته شه
             axisMinimum =| 0f

             تا چه عددی؟
             axisMaximum = 50000000f
         }

         //X-Axis
         محور پایینی
         xAxis.apply {

             چند تا لیبل داشته باشیم
             منهای یک هم برای قضیه ایندکس و این هاست
             labelCount = count - 1

             مینیموم
             axisMinimum = 0f

             ماکسیموم
             axisMaximum = (count - 1).toFloat()

             یه حالتی داره که مثلا ده تا مقدار داری نمیخوای هر ده تاش رو روی محور نشون بده
             مثلا فقط اعداد زوجت رو نشون بده رو محور
             یا مثلا صد رو به بازه ده تا ده تا تقسیم کنی
             نمودارت رو الکی شلوغ نکنی
             ما فعالش میکنیم
             چون پیش فرضش فالسه
             isGranularityEnabled = true

             بازه چند تا چند تا باشه
             یه دونه یه دونه ش میشه یک اف
             میخوای ۵ تا ۵ تا باش خب میشه ۵ اف
             دیفالتش همین یک هست
             granularity = 1f

             محور افقی کجا نشون داده شه
             بالا یا پایین
             position = XAxis.XAxisPosition.BOTTOM

             فرمت ولیو ها
             valueFormatter = formatter

             فونت
             برای تایپ فیس یک اکستنشن مینویسیم
             typeface = setTypefaceNormal(context)

              سایز فونت
             textSize = 9.5f

             خطوط عمودی مربع مربع نمیخوایم پشت نمودار
             setDrawGridLines(false)

             ولی خط خود محور رو میخوایم
             setDrawAxisLine(true)

             رنگ محور
             axisLineColor = ContextCompat.getColor(context, R.color.lavender)
         }

         //Tooltip
         و اما کاستوم کردن تولتیپ که خیلی مهمه
         چون داکیومنت خود کتابخونه توی این بخش یک مقدار ضعیفه
         و برای فهمیدنش نیاز دارید که یک مقدار دانش کاستوم ویو داشته باشید
         و در کل آموزش ارزشمندیه
         پایین همین فایل توضیح دادیم این کاستوم ویو رو
         val toolTip = CustomToolTip(context, R.layout.custom_chart_tooltip, list)

         در نهایت تولتیپ رو در قالب مارکر میدیم بهش
         marker = toolTip


         //Init chart
         کل ولیوها رو میسازیم و میریزیم داخل این متغیر
         این در واقع همون متد ست دیتا هست
         ورودیش از نوع تی هست
         ما چون داریم نمودار خطی میکشیم از نوع لاین دیتا میسازیم و میدیم بهش
         برای ساخت دیتا هم یک متد مینویسیم
         که مشخصات گرافیکی هر ولیو روی نمودار رو میسازه و کاستومایز میکنه
         کافیه برای این کار لیست ورودی ها رو بهش بدیم و لیبل مورد نظر
         data = lineChartDataSet(entry, context)

         در نهایت متد اینولیدیت رو صدا میزنیم
         که میاد کاستومایز های ما رو به لاین چارت تزریق میکنه
         و بازسازی میکنه
         invalidate()
     }
 }


----------------------------------------------------------------------------------------------------
فانکشن مربوط به ساختن دیتای مربوط به ساخت نمودار
کاستومایز کردن ولیو های مربوط به نمودار
ما تا الان داشتیم خود نمودار رو کاستومایز میکردیم
حالا میخوایم ولیو هاشو بکنیم

 private fun lineChartDataSet(list: ArrayList<Entry>, context: Context): LineData {

     اول از همه باید دیتا رو بسازیم و بعد کاستومایز رو روش انجام بدیم
     که این لاین دیتا ست از من یک لیست میگیره و یک لیبل
     لیبلش مال کجاس؟
     اون راهنمایی بود که گفتیم زیر نمودار نشون میده
     عنوان اون میشه
     حالا ما که کلا هایدش کردیم توی این نمودار
     یک اسم الکی زدیم براش
     val lineDataSet = LineDataSet(list, "Data").apply {

     اپلای که میزینم اون آبجکت ریترن میشه. یکی از فرقای ویت و اپلای اینه برای مثال

         مشخصات خط نمودار
         lineWidth = 2f
         valueTextSize = 15f

         لاینی باشه نمودار
         mode = LineDataSet.Mode.LINEAR

         رنگ
         color = ContextCompat.getColor(context, R.color.royalBlue)

         نمیخوام ولیو ها رو برام بکشه
         setDrawValues(false)

         رنگ فونت برای حالتی که ولیو ها رو ست میکنیم
         ما نکردیم ولی کدش اینه
         valueTextColor = ContextCompat.getColor(context, R.color.eerieBlack)

         وسط دیتا ها رو دایره سوراخ دار بکش
         setDrawCircleHole(true)

         کاستومایز دایره سوراخ دار
         circleHoleRadius = 4f
         circleRadius = 5f
         setCircleColor(ContextCompat.getColor(context, R.color.royalBlue))

         درجه شفافیت صد یعنی خیلی شفاف نامریی
         fillAlpha = 100

         هایلایت نداشته باشه
         setDrawHighlightIndicators(false)
     }

     لاین دیتا رو میسازیم
     val dataSet = ArrayList<ILineDataSet>()
     dataSet.add(lineDataSet)
     return LineData(dataSet)
 }


----------------------------------------------------------------------------------------------------
 برای کاستوم کردن تولتیپ کتابخونه باید بیای از مارکر ویوی خود کتابخونه اکستند کنی
 که این کانتکس و لایه رو از ما میخواد
 ما اینا رو توی پارامترهای ورودی میگیریم و میدیم بهش
 و دقت کنید که چیزایی که توی پوشه res هستن از نوع اینتیجر هستن
 چون ما ایدیشون رو پاس میدیم این ور اون ور
 همون مسیرشون

ما میخوایم اطلاعاتی که قراره توی تولتیپ نمایش داده شه رو هم بهش پاس بدیم
این دیتا قراره فقط تاریخ  باشه
ولی چرا به صورت لیست استرینگ هست؟
این دیتا با اون دیتایی که روی محورها ست میشه فرق داره
قراره بره بشینه روی ولیوهای نمودار
که بعدا ایندکس ها رو توی کد همین کلاس میداریم
و نمایش میدیم

class CustomToolTip(context: Context, layout: Int, private val dateToDisplay: MutableList<String>)
 : MarkerView(context, layout) {

    یک روش دسترسی پیدا کردن به ویوها توی کاستوم ویوها این هست
    به جای بایندیگ با فایند ویو بای ایدی دسترسی پیدا کنیم
    private var dateTxt: TextView? = null
    private var countTxt: TextView? = null

    init {
        dateTxt = findViewById(R.id.dateTxt)
        countTxt = findViewById(R.id.countTxt)
    }

    این متد رو اورراید میکنیم
    که برای بازسازی ویو با مشخصات مورد نظر ما هست
    override fun refreshContent(e: Entry, highlight: Highlight) {
        try {
            دسترسی به ایندکسی که الان هستیم
            ایندکس ایکسش
            ایندکس وای هم داره
            مقادیر روی محور ایکس متغیره
            val index = e.x.toInt()

            مقادیر رو ست میکنیم
            dateTxt?.text = dateToDisplay[index]
            dateTxt?.typeface = setTypefaceNormal(context)

            مقادیر تاریخ رو از ورودی گرفتیم
            مقادیر قیمت رو ولی به محور وای پاس داده بودیم
            حالا از همون میخونیم
            countTxt?.text = highlight.y.toInt().moneySeparatingWithoutToman()
            countTxt?.typeface = setTypefaceNormal(context)
        } catch (e: Exception) {
            e.printStackTrace()
        }
        super.refreshContent(e, highlight)
    }

    یک متد دیگه که اورراید میکنیم گت افست هست
    که میاد اون پوزیشن تولتیپ را برای ما مشخص میکنه
    پوینت اف و پوینت دی و این ها مربوط میشن به وقتی که داریم با کاستوم ویوها کار میکنیم
    و نقط و مخصتصات نقطه و این هان
    حالا کسی که این کتابخونه رو نوشته
    اومده یک کلاسی رو در نظر گرفته که ما بتونیم به این نقطه ها دسترسی داشته باشیم
    و بالا پایینشون کنیم
    این پوینت ها مال کنوس هستن
    این MPPointF به کلاس پوینت اف خود اندروید اشاره میکنه با یک سری ویژگی بیشتر
    در مجموع میایمم میگیم که تولتیپ نسبت به نقطه کجا باشه
    override fun getOffset(): MPPointF {
    عرض رو تقسیم بر دو میکنیم برای عرض
    برای ارتفاع هم ارتفاع
        return MPPointF(-(width / 2f), -height.toFloat())
    }
}
--------------------------------------------------------
در مورد طراحی لایه مربوط به تولتیپ
ما حالت بابل چت رو ایجاد کردیم
اون فلش تیز زیرش رو چجوری در اوردیم؟
با کد و با استفاده از لیر لیست

<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">

این آیتمی که اینجاس به صورت پیش فرض یک مربع هست
    <item>
        <rotate
            این میاد مربع رو میچرخونه. ۴۵ درجه یعنی حالت لوزی
            مثلا ۲۰ درجه یکم کجه فقط
            android:fromDegrees="45"

            روی محور ایکس و وای جا به جاش میکنیم تا جایی که فقط گوشه ش پیدا باشه
            android:pivotX="135%"
            android:pivotY="15%"

            نمیدونم انگار تاثیر خاصی نداره تغییر دادن عددش
            android:toDegrees="45">

            شکل ما مستطیل هست
            وقتی مستطیل رو میبریم داخل تگ روتیت میچرخونیمش
            و چون توی لایر لیست هستیم میتونیم چند تا شکل رو روی هم بندازیم...
            <shape android:shape="rectangle">

                رنگش
                <solid android:color="@color/cultured" />
                تیزی گوشه هاش
                <corners android:radius="@dimen/_2mdp" />
            </shape>
        </rotate>
    </item>
</layer-list>

Formatter ------------------------------------------------------------------------------------------
میتونستیم به شکل یک کلاس جدا بنویسیمش
ولی به صورت ایننر کلاس مینویسیم تا این مدلی رو هم یاد بگیریم
برای اینکه بتونیم به اتریبیوت های داخل این کلاس ها دسترسی داشته باشیم از نوع ایننر در نظر میگیریم

یک لیست از ما میگیره
از فرمتر خود کتابخونه ارث میبریم
که یک متد را برای ما اورراید میکنه
ما فقط به لیست روزها نیاز داریم
چون قیمت ها رو توی محور ایکس داریم
پس فقط لیست روزها رو پاس میدیم
    inner class DaysFormatter(private val daysList: ArrayList<String>) : IndexAxisValueFormatter() {
        override fun getAxisLabel(value: Float, axis: AxisBase?): String? {
            ایندکس رو از طریق ولیوی خودش به دست میاریم
            val index = value.toInt()
            return if (index < daysList.size) {
                daysList[index]
            } else {
                null
            }
        }
    }

----------------------------------------------------------------------------------------------------
در نهایت اینیشیالایز کردن دیتای نمودار به این شکل میشود

    //list
    private val daysList = arrayListOf<String>() // مقادیر روی محور ایکس که میدیم به فرمتر
    private val daysListForTooltip = arrayListOf<String>() // نمایش در تولتیپ

    چرا این لیست از نوع انتیتی هست؟ چون دیتای نمودارمون هست
    دایره تو خالیا بر اساس این کشیده میشن و به هم وصل میشن
    انتری ها یک ایندکس دارن و یک مقدار
    این ایندکس همون ایندکس تاریخ روی محور ایکس هست
    مقدارش قیمت روی محور وای
    private val pricesList = ArrayList<Entry>() // به محور وای پاس میدیم ولی نشون نمیدیم

    چرا دو تا لیست جدا برای محور ایکس و تولتیپ داریم درحالی که دیتاشون یکیه
    چون توی تولتیپ میخوایم سال رو نشون بدیم
    ولی توی محور نمیخوایم
    همین


                    is MyResponse.Success -> {
                        featuresLoading.changeVisibility(false, pricesChart)
                        response.data?.let { data ->
                            daysList.clear()
                            daysListForTooltip.clear()
                            pricesList.clear()

                            if (data.isNotEmpty()) {

                                توی این مدل فور ایندکس رو هم دسترسی داریم.
                                توی فور ایچ نداریم.
                                for (i in data.indices) {
                                    daysListForTooltip.add(data[i].day!!)

                                    فرمت دیتایی که داریم اینه
                                    1402-06-10
                                    خب ما نمیخوایم سال رو نشون بدیم روی محور
                                    پس دراپ میکنیم
                                    چون از اول استرینگ میخوایم حذف کنیم دراپ میزنیم
                                    اگه از آخرش بود دراپ لست میزدیم
                                    daysList.add(data[i].day!!.drop(5))

                                    این ایف اجباری نیس.
                                    صرفا برا اینه نمودار نیفته رو صفر
                                    شما اگه میخواید بیفته و نیازش دارید بذارید باشه
                                    if (data[i].price!! > 0)
                                        pricesList.add(Entry(i.toFloat(), data[i].price!!.toFloat()))
                                }
                                //Init chart
                                lifecycleScope.launch {
                                    delay(100)
                                    if (pricesList.isNotEmpty()) {
                                        pricesChart.setupMyChart(
                                            DaysFormatter(daysList), pricesList, daysList.size,
                                            daysListForTooltip
                                        )
                                    }
                                }
                            }
                        }
                    }